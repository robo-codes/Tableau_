<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20231.23.0310.1044                               -->
<workbook original-version='18.1' source-build='2023.1.0 (20231.23.0310.1044)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='placed' inline='true' name='federated.16mspkp1407wzn1e4ix890eenso9' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='placed' name='textscan.0p4t2c71wk8nnj1atsk3r157n7ug'>
            <connection class='textscan' directory='C:/Users/solan/DoubleTrouble' filename='placed.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.0p4t2c71wk8nnj1atsk3r157n7ug' name='placed.csv' table='[placed#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_CA' separator=','>
            <column datatype='string' name='ProgramName' ordinal='0' />
            <column datatype='string' name='CourseCode' ordinal='1' />
            <column datatype='string' name='WilType' ordinal='2' />
            <column datatype='string' name='ContactName' ordinal='3' />
            <column datatype='string' name='City' ordinal='4' />
            <column datatype='real' name='StudentsPlacedFall22' ordinal='5' />
            <column datatype='string' name='PAC/PLACE/CAREER' ordinal='6' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='textscan.0p4t2c71wk8nnj1atsk3r157n7ug' name='placed.csv' table='[placed#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_CA' separator=','>
            <column datatype='string' name='ProgramName' ordinal='0' />
            <column datatype='string' name='CourseCode' ordinal='1' />
            <column datatype='string' name='WilType' ordinal='2' />
            <column datatype='string' name='ContactName' ordinal='3' />
            <column datatype='string' name='City' ordinal='4' />
            <column datatype='real' name='StudentsPlacedFall22' ordinal='5' />
            <column datatype='string' name='PAC/PLACE/CAREER' ordinal='6' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[placed.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_CA&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ProgramName</remote-name>
            <remote-type>129</remote-type>
            <local-name>[ProgramName]</local-name>
            <parent-name>[placed.csv]</parent-name>
            <remote-alias>ProgramName</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[placed.csv_13EFE2AA01274C27B19F21D1C8EE2644]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CourseCode</remote-name>
            <remote-type>129</remote-type>
            <local-name>[CourseCode]</local-name>
            <parent-name>[placed.csv]</parent-name>
            <remote-alias>CourseCode</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[placed.csv_13EFE2AA01274C27B19F21D1C8EE2644]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>WilType</remote-name>
            <remote-type>129</remote-type>
            <local-name>[WilType]</local-name>
            <parent-name>[placed.csv]</parent-name>
            <remote-alias>WilType</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[placed.csv_13EFE2AA01274C27B19F21D1C8EE2644]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ContactName</remote-name>
            <remote-type>129</remote-type>
            <local-name>[ContactName]</local-name>
            <parent-name>[placed.csv]</parent-name>
            <remote-alias>ContactName</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[placed.csv_13EFE2AA01274C27B19F21D1C8EE2644]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>City</remote-name>
            <remote-type>129</remote-type>
            <local-name>[City]</local-name>
            <parent-name>[placed.csv]</parent-name>
            <remote-alias>City</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[placed.csv_13EFE2AA01274C27B19F21D1C8EE2644]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>StudentsPlacedFall22</remote-name>
            <remote-type>5</remote-type>
            <local-name>[StudentsPlacedFall22]</local-name>
            <parent-name>[placed.csv]</parent-name>
            <remote-alias>StudentsPlacedFall22</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[placed.csv_13EFE2AA01274C27B19F21D1C8EE2644]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PAC/PLACE/CAREER</remote-name>
            <remote-type>129</remote-type>
            <local-name>[PAC/PLACE/CAREER]</local-name>
            <parent-name>[placed.csv]</parent-name>
            <remote-alias>PAC/PLACE/CAREER</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[placed.csv_13EFE2AA01274C27B19F21D1C8EE2644]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='TopCity' datatype='string' name='[Calculation_1352487276698451968]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF { FIXED [ProgramName]: SUM([StudentsPlacedFall22]) } &lt; 17 THEN &quot;Others&quot; ELSE [City] END' />
      </column>
      <column caption='topPrograms' datatype='string' name='[Calculation_551128017416663046]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF { FIXED [ProgramName]: SUM([StudentsPlacedFall22]) } &lt; 49 THEN &quot;Others&quot; ELSE [ProgramName] END' />
      </column>
      <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
        <semantic-values semantic-role='[City].[Name]'>
          <semantic-value key='&quot;banff&quot;' value='&quot;Banff&quot;' />
          <semantic-value key='&quot;bath&quot;' value='&quot;Bathurst&quot;' />
          <semantic-value key='&quot;belle river&quot;' value='&quot;Lakeshore&quot;' />
          <semantic-value key='&quot;belleville&quot;' value='&quot;Belleville&quot;' />
          <semantic-value key='&quot;blenheim&quot;' value='&quot;Blandford-Blenheim&quot;' />
          <semantic-value key='&quot;bolton&quot;' value='&quot;Bolton-Ouest&quot;' />
          <semantic-value key='&quot;brampton&quot;' value='&quot;Brampton&quot;' />
          <semantic-value key='&quot;burlington&quot;' value='&quot;Burlington&quot;' />
          <semantic-value key='&quot;caledonia&quot;' value='&quot;Caledonia&quot;' />
          <semantic-value key='&quot;cambridge&quot;' value='&quot;Cambridge&quot;' />
          <semantic-value key='&quot;charing cross&quot;' value='&quot;Chatham-Kent&quot;' />
          <semantic-value key='&quot;cochrane&quot;' value='&quot;Cochrane&quot;' />
          <semantic-value key='&quot;collingwood&quot;' value='&quot;Collingwood&quot;' />
          <semantic-value key='&quot;comber&quot;' value='&quot;Lakeshore&quot;' />
          <semantic-value key='&quot;concord&quot;' value='&quot;Vaughan&quot;' />
          <semantic-value key='&quot;cornwall&quot;' value='&quot;Cornwall&quot;' />
          <semantic-value key='&quot;courtice&quot;' value='&quot;Oshawa&quot;' />
          <semantic-value key='&quot;cranbrook&quot;' value='&quot;Cranbrook&quot;' />
          <semantic-value key='&quot;dartmouth&quot;' value='&quot;Dartmouth&quot;' />
          <semantic-value key='&quot;dearborn&quot;' value='&quot;Dearborn&quot;' />
          <semantic-value key='&quot;dover centre&quot;' value='&quot;Chatham-Kent&quot;' />
          <semantic-value key='&quot;dresden&quot;' value='&quot;Chatham-Kent&quot;' />
          <semantic-value key='&quot;dryden&quot;' value='&quot;Dryden&quot;' />
          <semantic-value key='&quot;dundas&quot;' value='&quot;North Dundas&quot;' />
          <semantic-value key='&quot;dutton&quot;' value='&quot;Dutton/Dunwich&quot;' />
          <semantic-value key='&quot;edmonton&quot;' value='&quot;Edmonton&quot;' />
          <semantic-value key='&quot;essex&quot;' value='&quot;Essex&quot;' />
          <semantic-value key='&quot;etobicoke&quot;' value='&quot;Toronto&quot;' />
          <semantic-value key='&quot;georgetown&quot;' value='&quot;Georgetown&quot;' />
          <semantic-value key='&quot;geraldton&quot;' value='&quot;Greenstone&quot;' />
          <semantic-value key='&quot;golden&quot;' value='&quot;Golden&quot;' />
          <semantic-value key='&quot;grand valley&quot;' value='&quot;East Luther Grand Valley&quot;' />
          <semantic-value key='&quot;hamilton&quot;' value='&quot;Hamilton&quot;' />
          <semantic-value key='&quot;hanover&quot;' value='&quot;Hanover&quot;' />
          <semantic-value key='&quot;huntsville&quot;' value='&quot;Huntsville&quot;' />
          <semantic-value key='&quot;ilderton&quot;' value='&quot;London&quot;' />
          <semantic-value key='&quot;kanata&quot;' value='&quot;Ottawa&quot;' />
          <semantic-value key='&quot;kemptville&quot;' value='&quot;North Grenville&quot;' />
          <semantic-value key='&quot;kincardine&quot;' value='&quot;Kincardine&quot;' />
          <semantic-value key='&quot;kingston&quot;' value='&quot;Kingston&quot;' />
          <semantic-value key='&quot;kingsville&quot;' value='&quot;Kingsville&quot;' />
          <semantic-value key='&quot;komoka&quot;' value='&quot;London&quot;' />
          <semantic-value key='&quot;lakeshore&quot;' value='&quot;Lakeshore&quot;' />
          <semantic-value key='&quot;lasalle&quot;' value='&quot;Windsor&quot;' />
          <semantic-value key='&quot;lasalle.&quot;' value='&quot;Windsor&quot;' />
          <semantic-value key='&quot;leamington&quot;' value='&quot;Leamington&quot;' />
          <semantic-value key='&quot;listowell&quot;' value='&quot;North Perth&quot;' />
          <semantic-value key='&quot;london&quot;' value='&quot;London&quot;' />
          <semantic-value key='&quot;lucan&quot;' value='&quot;Lucan Biddulph&quot;' />
          <semantic-value key='&quot;maidstone&quot;' value='&quot;Lakeshore&quot;' />
          <semantic-value key='&quot;markham&quot;' value='&quot;Markham&quot;' />
          <semantic-value key='&quot;merlin&quot;' value='&quot;Chatham-Kent&quot;' />
          <semantic-value key='&quot;mirabel&quot;' value='&quot;Mirabel&quot;' />
          <semantic-value key='&quot;mitchell&quot;' value='&quot;West Perth&quot;' />
          <semantic-value key='&quot;montreal&quot;' value='&quot;Montreal&quot;' />
          <semantic-value key='&quot;morrisburg&quot;' value='&quot;South Dundas&quot;' />
          <semantic-value key='&quot;new hamburg&quot;' value='&quot;Wilmot&quot;' />
          <semantic-value key='&quot;niagara&quot;' value='&quot;Niagara-On-The-Lake&quot;' />
          <semantic-value key='&quot;north bay&quot;' value='&quot;North Bay&quot;' />
          <semantic-value key='&quot;oakville&quot;' value='&quot;Oakville&quot;' />
          <semantic-value key='&quot;oldcastle&quot;' value='&quot;Tecumseh&quot;' />
          <semantic-value key='&quot;orangeville&quot;' value='&quot;Orangeville&quot;' />
          <semantic-value key='&quot;orléans&quot;' value='&quot;Ottawa&quot;' />
          <semantic-value key='&quot;oshawa&quot;' value='&quot;Oshawa&quot;' />
          <semantic-value key='&quot;ottawa&quot;' value='&quot;Ottawa&quot;' />
          <semantic-value key='&quot;paris&quot;' value='&quot;Brant&quot;' />
          <semantic-value key='&quot;pelee island&quot;' value='&quot;Pelee&quot;' />
          <semantic-value key='&quot;pembroke&quot;' value='&quot;Pembroke&quot;' />
          <semantic-value key='&quot;peterborough&quot;' value='&quot;Peterborough&quot;' />
          <semantic-value key='&quot;petrolia&quot;' value='&quot;Petrolia&quot;' />
          <semantic-value key='&quot;point edward&quot;' value='&quot;Point Edward&quot;' />
          <semantic-value key='&quot;port hope&quot;' value='&quot;Port Hope&quot;' />
          <semantic-value key='&quot;richmond hill&quot;' value='&quot;Richmond Hill&quot;' />
          <semantic-value key='&quot;ridgetown&quot;' value='&quot;Chatham-Kent&quot;' />
          <semantic-value key='&quot;ruthven&quot;' value='&quot;Kingsville&quot;' />
          <semantic-value key='&quot;sarnia&quot;' value='&quot;Sarnia&quot;' />
          <semantic-value key='&quot;sault ste. marie&quot;' value='&quot;Sault Ste. Marie&quot;' />
          <semantic-value key='&quot;scarborough&quot;' value='&quot;Toronto&quot;' />
          <semantic-value key='&quot;shelburne&quot;' value='&quot;Shelburne&quot;' />
          <semantic-value key='&quot;southfield&quot;' value='&quot;Southfield&quot;' />
          <semantic-value key='&quot;st. marys&quot;' value='&quot;Perth South&quot;' />
          <semantic-value key='&quot;stoney creek&quot;' value='&quot;Hamilton&quot;' />
          <semantic-value key='&quot;stoney point&quot;' value='&quot;Lakeshore&quot;' />
          <semantic-value key='&quot;stratford&quot;' value='&quot;Stratford&quot;' />
          <semantic-value key='&quot;strathroy&quot;' value='&quot;Strathroy-Caradoc&quot;' />
          <semantic-value key='&quot;sudbury&quot;' value='&quot;Sudbury&quot;' />
          <semantic-value key='&quot;taylor&quot;' value='&quot;Taylor&quot;' />
          <semantic-value key='&quot;tecumseh&quot;' value='&quot;Tecumseh&quot;' />
          <semantic-value key='&quot;thamesville&quot;' value='&quot;Chatham-Kent&quot;' />
          <semantic-value key='&quot;thornhill&quot;' value='&quot;York&quot;' />
          <semantic-value key='&quot;tilbury&quot;' value='&quot;Chatham-Kent&quot;' />
          <semantic-value key='&quot;toronto&quot;' value='&quot;Toronto&quot;' />
          <semantic-value key='&quot;vancouver&quot;' value='&quot;Vancouver&quot;' />
          <semantic-value key='&quot;vaughan&quot;' value='&quot;Vaughan&quot;' />
          <semantic-value key='&quot;victoria&quot;' value='&quot;Victoria&quot;' />
          <semantic-value key='&quot;wallacbeurg&quot;' value='&quot;Chatham-Kent&quot;' />
          <semantic-value key='&quot;wallaceburg&quot;' value='&quot;Chatham-Kent&quot;' />
          <semantic-value key='&quot;warren&quot;' value='&quot;Warren&quot;' />
          <semantic-value key='&quot;waterford&quot;' value='&quot;New Waterford&quot;' />
          <semantic-value key='&quot;waterloo&quot;' value='&quot;Waterloo&quot;' />
          <semantic-value key='&quot;wheatley&quot;' value='&quot;Chatham-Kent&quot;' />
          <semantic-value key='&quot;whitby&quot;' value='&quot;Whitby&quot;' />
          <semantic-value key='&quot;winchester&quot;' value='&quot;North Dundas&quot;' />
          <semantic-value key='&quot;windsor&quot;' value='&quot;Windsor&quot;' />
          <semantic-value key='&quot;wingham&quot;' value='&quot;North Huron&quot;' />
          <semantic-value key='&quot;woodslee&quot;' value='&quot;Lakeshore&quot;' />
          <semantic-value key='&quot;woodstock&quot;' value='&quot;Woodstock&quot;' />
          <semantic-value key='&quot;wyoming&quot;' value='&quot;Plympton-Wyoming&quot;' />
        </semantic-values>
        <semantic-values semantic-role='[Geographical].[Latitude]'>
          <semantic-value key='&quot;alliston&quot;' value='44.151299999999999' />
          <semantic-value key='&quot;arkona&quot;' value='43.073999999999998' />
          <semantic-value key='&quot;belwoodtario&quot;' value='43.7941' />
          <semantic-value key='&quot;chapleau&quot;' value='47.842300000000002' />
          <semantic-value key='&quot;corunna&quot;' value='42.884700000000002' />
          <semantic-value key='&quot;courtright&quot;' value='42.816667000000002' />
          <semantic-value key='&quot;emeryville&quot;' value='42.296799999999998' />
          <semantic-value key='&quot;fergus&quot;' value='43.706000000000003' />
          <semantic-value key='&quot;glencoe&quot;' value='42.747300000000003' />
          <semantic-value key='&quot;grand bend&quot;' value='43.315600000000003' />
          <semantic-value key='&quot;gta&quot;' value='44.038400000000003' />
          <semantic-value key='&quot;hagersville&quot;' value='42.959899999999998' />
          <semantic-value key='&quot;hiuntsville&quot;' value='45.326900000000002' />
          <semantic-value key='&quot;minett&quot;' value='45.163200000000003' />
          <semantic-value key='&quot;mooretown&quot;' value='42.841799999999999' />
          <semantic-value key='&quot;morriston&quot;' value='43.448300000000003' />
          <semantic-value key='&quot;mount brydges&quot;' value='42.909700000000001' />
          <semantic-value key='&quot;newbury&quot;' value='42.6845' />
          <semantic-value key='&quot;newmarket&quot;' value='44.059199999999997' />
          <semantic-value key='&quot;pakenham&quot;' value='45.332999999999998' />
          <semantic-value key='&quot;port perry&quot;' value='44.104999999999997' />
          <semantic-value key='&quot;st. thomas&quot;' value='42.777700000000003' />
          <semantic-value key='&quot;staples&quot;' value='42.171100000000003' />
          <semantic-value key='&quot;trois-rivières&quot;' value='46.343000000000004' />
          <semantic-value key='&quot;watford&quot;' value='42.955500000000001' />
          <semantic-value key='&quot;west lorne&quot;' value='42.6038' />
        </semantic-values>
        <semantic-values semantic-role='[Geographical].[Longitude]'>
          <semantic-value key='&quot;alliston&quot;' value='-79.874399999999994' />
          <semantic-value key='&quot;arkona&quot;' value='-81.830600000000004' />
          <semantic-value key='&quot;belwoodtario&quot;' value='-80.322500000000005' />
          <semantic-value key='&quot;chapleau&quot;' value='-83.402600000000007' />
          <semantic-value key='&quot;corunna&quot;' value='-82.450900000000004' />
          <semantic-value key='&quot;courtright&quot;' value='-82.466667000000001' />
          <semantic-value key='&quot;emeryville&quot;' value='-82.760300000000001' />
          <semantic-value key='&quot;fergus&quot;' value='-80.377799999999993' />
          <semantic-value key='&quot;glencoe&quot;' value='-81.709500000000006' />
          <semantic-value key='&quot;grand bend&quot;' value='-81.764499999999998' />
          <semantic-value key='&quot;gta&quot;' value='-79.200000000000003' />
          <semantic-value key='&quot;hagersville&quot;' value='-80.052300000000002' />
          <semantic-value key='&quot;hiuntsville&quot;' value='-79.216800000000006' />
          <semantic-value key='&quot;minett&quot;' value='-79.653300000000002' />
          <semantic-value key='&quot;mooretown&quot;' value='-82.461699999999993' />
          <semantic-value key='&quot;morriston&quot;' value='-80.117199999999997' />
          <semantic-value key='&quot;mount brydges&quot;' value='-81.495900000000006' />
          <semantic-value key='&quot;newbury&quot;' value='-81.797799999999995' />
          <semantic-value key='&quot;newmarket&quot;' value='-79.461299999999994' />
          <semantic-value key='&quot;pakenham&quot;' value='-76.290400000000005' />
          <semantic-value key='&quot;port perry&quot;' value='-78.944100000000006' />
          <semantic-value key='&quot;st. thomas&quot;' value='-81.182699999999997' />
          <semantic-value key='&quot;staples&quot;' value='-82.593500000000006' />
          <semantic-value key='&quot;trois-rivières&quot;' value='-72.542100000000005' />
          <semantic-value key='&quot;watford&quot;' value='-81.879900000000006' />
          <semantic-value key='&quot;west lorne&quot;' value='-81.606700000000004' />
        </semantic-values>
      </column>
      <column caption='Contact Name' datatype='string' name='[ContactName]' role='dimension' semantic-role='' type='nominal' />
      <column caption='Course Code' datatype='string' name='[CourseCode]' role='dimension' type='nominal' />
      <column caption='Pac/Place/Career' datatype='string' name='[PAC/PLACE/CAREER]' role='dimension' type='nominal' />
      <column caption='Program Name' datatype='string' name='[ProgramName]' role='dimension' type='nominal' />
      <column caption='Wil Type' datatype='string' name='[WilType]' role='dimension' type='nominal' />
      <_.fcp.ObjectModelTableType.true...column caption='placed.csv' datatype='table' name='[__tableau_internal_object_id__].[placed.csv_13EFE2AA01274C27B19F21D1C8EE2644]' role='measure' type='quantitative' />
      <column-instance column='[Calculation_551128017416663046]' derivation='None' name='[none:Calculation_551128017416663046:nk]' pivot='key' type='nominal' />
      <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
      <column-instance column='[ContactName]' derivation='None' name='[none:ContactName:nk]' pivot='key' type='nominal' />
      <column-instance column='[CourseCode]' derivation='None' name='[none:CourseCode:nk]' pivot='key' type='nominal' />
      <column-instance column='[PAC/PLACE/CAREER]' derivation='None' name='[none:PAC/PLACE/CAREER:nk]' pivot='key' type='nominal' />
      <column-instance column='[ProgramName]' derivation='None' name='[none:ProgramName:nk]' pivot='key' type='nominal' />
      <column-instance column='[WilType]' derivation='None' name='[none:WilType:nk]' pivot='key' type='nominal' />
      <group hidden='true' name='[Exclusions (Program Name,topPrograms)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:ProgramName:nk]' />
          <groupfilter function='level-members' level='[none:Calculation_551128017416663046:nk]' />
        </groupfilter>
      </group>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:WilType:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Capstone&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>%null%</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Simulation&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Placement&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Job Shadowing&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:ContactName:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;*Piero Aleo&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Anita Victor&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Brett Christensen&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Chris Weller&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Danielle Fan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Dennis Huntley&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Eksa&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;George Schidowka&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Jamey&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Jessica&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Ken&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Leeann&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Marc Rivest/David Johnson&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Michael&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Natalie Saby&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Paul Beaulieu&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Richard Rauth&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Roy Simone&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Shelley&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Sylvia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tracie&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Amanda&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Andy&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Barb Stamatinos / Ronda Zalewski&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Celina Ussoletti&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Craven&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;David Schwartz&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Dorise&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Francis Roy&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Heather&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Jeannie&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Joe Varacalli&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Karly&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Kristen&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Luciano Barcsai&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Maureen&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Miriam&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Nikki&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Philip Monaco&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Robyn&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Sandra Marcoux&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Steve Zold&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Todd&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Wasim&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Angelo Gentili&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Brandi&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cheryl&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Dan Russ&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Deanna&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Drew Coulson&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;G&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Iliana,&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Jo Ann Foote&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;John Matheson&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Karen&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Katie&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Laura&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Maddy&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Melanie Norton&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Nada&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Paige&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Radwan Tamr&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Rod Hebert&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sebastiano DiPietro&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Tina,&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Tony Masciotra&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Yvette Tetzlaff &quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Jennifer&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Albert Schepers&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Alysha&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Anthony Pupatello&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Britney&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cindy&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Dave Halliday&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Elizabeth Stairs&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Gloria&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Janet&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Jim&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Jose&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kevyn Janisse&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Lorelei&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Marilyn,&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Mike Coombs&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nathan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Penny&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Rishma&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sabrina Bilyk&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sherry&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Taylor Allen&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Valdine&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;*Ralph Meo&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ann&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Brian Bartlett&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Christie&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Danielle Spadafora&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Dereck&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Elisa Braccio, Owner&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Gina Read&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jamie Greco, RPht&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jessica Gardonio&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jordan Casey&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ken Kapusniak&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Liana&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Marcel Morin&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Michael DiMaio&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Natalyn&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Paul Phillips&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Rick&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ruth&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Shelley Murphy, RPhT&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Tammy&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Tracy&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;*Bart Di Giovanni&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Anisha&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Brandon&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Chintan J. Virani&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Daneille&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Derek, Student Relations&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Duncan Wilson&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Gary Saini&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ingrid&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Jennifer,&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Johnny Ramadan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Keith Nichol&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Lauren&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Maddy Boughner&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Melissa&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Nadeem Aslam&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Paiton&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ray Nascimento&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Rodrigo Mazza&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Shannon&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Sukhy&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Tony Santarossa&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Yvette Tetzlaff (Cell) 5198905104&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;Sarah&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Andrew&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Ayron&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Carrie Mady&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Courtney,&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;David Lester&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Don Cullen&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Fiona Coughlin&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Greg Koppeser&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Jason Thomas&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Joe Rauti&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Karen VanRiesen&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kirstie&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Luc Pignal&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Matt&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Miranda&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Nicole&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Peter Valente / Sarah Carriere&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Robert DiMaio&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Sandra&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Tina&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Vivek&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;0&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Angela&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Becker&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Chantelle&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Dale&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;David Skillings&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Dorothy (Hoi Man) Leung&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Frank&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Heather Chase&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Jeff Boivin&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;John&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Kasia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Kristy Osborne&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Luis&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Megan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mo Thomson&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Noelle&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Phyllis&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Rocca&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Sandy&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Steven&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Tom&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Wayne Dupuis&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Amrochi&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Aversa,&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Carla Marsden, RPhT&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Corrie,&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;David&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Diane Ruthven&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ennio Sperduti&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Greg Chiarcos&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Jason&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Jody,&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kahentiiosta&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kimberly&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Louis Coco&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mary&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Michelle&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Nick Marcovecchio&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Peter Indelicato&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Rob Modestino, Owner&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sandeep Kailey&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Stelica&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Terry M.&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Vince&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;*Joe Lepera&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Anisha Nayar&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Brenda&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Chris Mannina&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Danielle&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Denise&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ed Cope&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Gayle&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Jackie&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Jeremiah Baker&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Jolaine McAvoy&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kelly&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Laurie&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Marc Dean&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mena&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Nadia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Pamela&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Rebecca&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Rosa&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Shawn Kelly&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Susan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Toula&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Zack&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Alyssa&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Antoinette&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Brode &quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Clayton&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Dave Medved&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Devon&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Ella&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Gordon Albert&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Janette&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Joshua&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Khadija&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Loris&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mark Gibson, Student Engagement; Becky Lau, Pharmacy Supervisor&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Michelle Wilson&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Neil&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Perry Wong&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Rob&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sadie&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Simona&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sue&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Teila-Marie&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Vanessa&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Alexa&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Alyssia Isabella&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Ashley&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Brooke&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Colleen&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Dave Mussio&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Diana&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Emilee&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Greg&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Janicke&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Joan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Josie&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Lory&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Mark Popkey&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Mike&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Nekpen Asemota&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Peter Adams, Owner&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Rob D&apos;Alimonte&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Sal Costante&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Stan Francic&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Tenecia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Vicki&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Anthony Mastrodicasa&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Avery&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Carol&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Courtney&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;David Colle&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Diksha&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Eric&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Greg Drouillard&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Jason Spina&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Joe&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Khush&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kiranjit Chadha&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Luann&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Massimo Carlesimo&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Mike Quaggiotto&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Nick Morrison&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Peter Letkeman&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Sandi&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Stephanie&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Thaddeus Molnar&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Vince Lapico&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Andrew McPherson&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Azhar Omarjee&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Celina&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Craig St.Jean&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;David McCloskey&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Donna&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Fonda Asprakis/Sarah Mallott&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Hailey&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Jason Thomas &quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Joe Santarossa Jr.&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Karen VanRiesen+C20:D30&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Kris Mask&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Lucas Garby&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Matthew Thibert&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Miriah&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Niki&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Phila&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Robin&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sandra Larose&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Steve Crawford&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Walter Branco&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Aline&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Brian Klundert&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Christine&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Danny Azar&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Debbie&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Derek Astbury&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Elizabeth&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Gino Piccioni&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Jamie Jaffray&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Jill&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Jordan Elhabi&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kenten Puryk&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Linda;&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Margo&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Michael Piroli&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Natasha&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Paulina&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rick Austin&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Ryan Roach&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Shelly&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Tanya&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Trina&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Lisa&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;*Nick Rosati&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Anita&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Brendan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Chris Mayo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Danielle Carlini&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Deniz Orak&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Ed Habib&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;George Elachkar&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Jacqueline&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Jerry Bruce&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Jolene&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kelly Woods&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Lee Bigaouette&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Marc Masotti&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Merissa Mills&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Nancy Rochon&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Paul&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Rhonda&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Roxanne&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Shawn Magone&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Sydney&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Tracey&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Zaneeka&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Amy&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Angela,&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bill Lester&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Charles Ruston / Lisa Stonehouse&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Dan Krutsch&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Davina&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Dory Azar&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Frank Dayus&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Heather,&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Jeff Malott&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;John Atwan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Kate&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Krystle&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Luna&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Meghan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mohamed Ali&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Nora&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Pona&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Rocco Lucente&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Stephen Hook&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Steven Bural, Sophia (Director)&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Tony Berardi&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Wilbur Mulder&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Anne Stevens, Professional Practice&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Audrianna&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Candace,&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Connie&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Dave Sinewitz&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Diane&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Emily&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Greg Barrett&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Jasjit Garcha (owner of all 3 sites, primary contact asdm1112@shoppersdrugmart.ca)&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Joanne&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Justin Marchand&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Kim&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Marty Gaudet&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mike Capuano&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Nguyen;&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Peter Giuliani&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Rob Fuller&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Samantha&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Steffany&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Terra&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Vicki Collavino&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Aaron&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Alison&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Brian Towsley&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Christine Ziter&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Darrin John&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Derek DiDonato&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Elizabeth Rowe&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Giuliana Hinchliffe&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Jane&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Jillian Hicks-McClary&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Jordan L. Shupka&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Kevin Nielson&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Lou Savoni&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Marianne Lalka&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Michaela&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Nate&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Peggy O&apos;Kane&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Rick Spencer&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sabrina&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sheri Digiovanni &quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Taylor&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Troy Lofthouse&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;Rachel&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;(Irshad-Ul (Irshad) Haq&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Angelo&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Boula&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Charlie Hotham&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Dan Pipitone&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Dawn&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Doug Taylor&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Franz Dalla Bona&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ian&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Jeff Nawalany&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;John Gawdunyk&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kathleen&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kyle&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Lyn Sarceda, Education Coordinator&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Melanie&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mohammed Manjra&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Olivia McGrath&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Robert&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Rochelle&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Sawyer&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Steven Valente&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Tony Boudreau&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Yolanda Stanzak&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:PAC/PLACE/CAREER:nk]' palette='tableau-10-medium' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;career fair&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;job shadow&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;coordinator contact&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>%null%</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;pac&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;orbis&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;lido commitment letters&quot;</bucket>
            </map>
            <map to='#ed97ca'>
              <bucket>&quot;placement&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;job posting&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:City:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;bath&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;concord&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;georgetown&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;kemptville&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;leamington&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;mirabel&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;other&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;sioux lookout&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;toronto&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;yellowknife&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;amherstburg&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;cambridge&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;dutton&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;hanover&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;listowell&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;north bay&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;richmond hill&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;taylor&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;wheatley&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;assiniboia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;essex&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;etobicoke&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;ingersoll&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;markham&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;orangeville&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;sarnia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;thunder bay&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;wingham&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;blenheim&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;courtright&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;golden&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;mooretown&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;paris&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;ridgetown&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;st. marys&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;victoria&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;cornwall&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;geraldton&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;kenora&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;maidstone&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;mississauga&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;ottawa&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;southfield&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;trois-rivières&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;aylmer&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;cochrane&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;farmington hills&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;grand bend&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;kamloops&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;medicine hat&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;orillia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;sault ste. marie&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;thunderbay&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;woodslee&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;caledonia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;dryden&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;hagersville&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;lasalle.&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;newmarket&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;port hope&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;strathroy&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;watford&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;alliston&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;belle river&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;chapleau&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;edmonton&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;hiuntsville&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;london&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;north york&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;whitby&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;brantford&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;dover centre&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;gta&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;lakeshore&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;new hamburg&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;petrolia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;stoney point&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;waterford&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;windsor&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;banff&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;fergus&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;kanata&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;kingsville&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;merlin&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;scarborough&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;woodstock&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;blind river&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;cranbrook&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;kirkland lake&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;morrisburg&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;pelee island&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;st. thomas&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;tecumseh&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;wallacbeurg&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;bolton&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;dartmouth&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;grand valley&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;kitchener&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;morriston&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;pembroke&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;staples&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;tilbury&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;burlington&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;dresden&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;guelph&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;lasalle&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;point edward&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;stratford&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;waterloo&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;calgary&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;dundas&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;hamilton&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;niagara&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;port perry&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;sudbury&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;west lorne&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;belleville&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;corunna&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;glencoe&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;kincardine&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;mitchell&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;newbury&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;owen sound&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;st catharines&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;vancouver&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;barrie&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;comber&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;fort frances&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;kelowna&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;komoka&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;minett&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;oshawa&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;shelburne&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;tillsonburg&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;wyoming&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;charing cross&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;chatham-kent&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;emeryville&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;huntsville&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;lucan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;oakville&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;ruthven&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;thamesville&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;winchester&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;brampton&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;dearborn&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;greater napanee&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;mount brydges&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;peterborough&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;stoney creek&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;wallaceburg&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;warren&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;belwoodtario&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;courtice&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;goderich&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;kingston&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;montreal&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;orléans&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;pakenham&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;st. catharines&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;vaughan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;arkona&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;chatham kent&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;collingwood&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;ilderton&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;oldcastle&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;saint-hyacinthe&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;thornhill&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:ProgramName:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Architectural Technnology&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Chemical Laboratory Technology&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Electrical Engineering Technician&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;K813 - Protection, Security and Investigation / K919- Police Foundations&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Public Relations&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Biomedical Engineering Technology - Equipment and Devices&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Business&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Dental Hygiene / Dental Assisting Level I and II&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Greenhouse Technician&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Paralegal / Paralegal - Accelerated&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Veterinary Technician&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Collborative Nursing&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Dental Assisting Level I and II&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Event Management&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Hospitality - Hotel &amp; Restaurant&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Plumbing Techniques/Plumbing Apprenticeship&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Construciton Engineering Technician / Construciton Project Management&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;B101- Early Childhood Education  / B820-Early Childhood Education - ACCELERATED / B846-Early Childhood Education - CONCURRENT&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;B819- POLICE FOUNDATIONS / B803-PROTECTION, SECURITY AND INVESTIGATION&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Electronics Engineering Technology - Industrial Automation&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Medical Laboratory Science&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;T036- CIVIL ENGINEERING TECHNOLOGY/T046-CONSTRUCTION MANAGEMENT PROJECT / T026-CONSTRUCTION ENGINEERING TECHNICIAN&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Architectural Technology/Construction Project Management&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Community &amp; Justice Services&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Electrical Techniques (both)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;K950/K963 - COLLABORATIVE NURSING/PRACTICAL NURSING/ K933- PSW&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Respiratory Therapy&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Academic and Career Entrance / College and Employment Preperation&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Business Administration - Marketing / Business Marketing&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Diagnostic Medical Sonography / Diagnostic Cardiac Sonography&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Interior Design&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Power Engineering&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;Office Administration - Health Services&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Border Services&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Esthetician&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;General Arts / Liberal Arts&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Office Administration - Executive&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>%null%</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Business - Marketing&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Developmental Services Worker / Developmental Services Worker - Accelerated&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Heating, Refrigeration &amp; Air Conditioning Technician&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Paramedic&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Web Development and Internet Applications&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;B899- EDUCATIONAL SUPPORT&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Early Childhood Education&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Esports Administration and Entrepreneurship&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Music Theatre&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;T914- HAIRSTYLIST/332A-STYLIST/HAIRDRESSER/ BARBER&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Advanced Medical Esthetics Practitioner&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Business- Accounting&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Fashion Design Technician&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;International Business Management - Logistics Systems&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Powerline Technician&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;B851 - BUSINESS ADMINISTRATION - FINANCE&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Community and Justice Services&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Medical Laboratory Science / Medical Laboratory Technician&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Pharmacy Technician&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;T805- WOODWORKING/ T964-CARPENTRY TECHNIQUES / 403A- GENERAL CARPENTRY&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;B228/K238/M228- OFFICE ADMINISTRATION - HEALTH SERVICES - FAST TRACK/ B226/K231- OAE  - FAST TRACK/  B226- OAG&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;B875 - ADVERTISING AND MARKETING COMMUNICATION MANAGEMENT/ B792 - WEB AND INTERACTIVE ADVERTISING&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Community Integration through Cooperative Education&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Medical Laboratory Technician&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;T855 - MECHANICAL ENGINEERING TECHNICIAN - INDUSTRIAL (MILLWRIGHT)/433A-MILLWRIGHT&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Child and Youth Care / Child and Youth Care - Accelerated&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Data Analytics for Business&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Occupational Therapist Assistant / Physiotherapist Assistant&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;T923 - PRECISION METAL CUTTING (EARN WHILE YOU LEARN)&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Brick and Stone Mason&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Dental Hygiene&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Graphic Design&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;T958/T167- TRUCK AND COACH TECHNIQUES/MOTIVE POWER /310S/310T-AUTO SERVICE TECHNCIAN/TRUCK AND COACH TECHNICIAN&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;B395- CULINARY MANAGEMENT/ 415A- COOK APPRENTICE BRANCH 2&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Child and Youth Care&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Electromechanical Engineering Technician/Technology - Robotics&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Landscape Horticulture&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Social Service Worker - Gerontology&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Diagnostic Medical Sonography&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Animation 2D/3D&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cardiovascular Technology&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Electric Drive Vehicle Technician&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Journalism / Media Convergance&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Pre-Service Firefighter Education and Training&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Business Accounting Chatham&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Business Administration - Human Resources&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Developtmental Service Worker&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Honours Bachelor of Applied Arts in Social Justice &amp; Legal Studies&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Personal Support Worker&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Welding&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;B895/K384/M995- SOCIAL SERVICE WORKER - GERONTOLOGY&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Computer Systems Technician/Technology - Networking&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mobile Applications Development&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;T867 - MECHANICAL TECHNICIAN - CAD/CAM/ 429A-GENERALL MACHINIST / 430A- TOOL AND DIE MAKER / 431A-MOULDMAKER&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Autism &amp; Behavioural Science&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;B802/M802 - HUMAN RESOURCES MANAGEMENT / B880 - BUS ADMIN - HUMAN RESOURCES&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Electromechanical Engineering Technology/Technician - Robotics&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mechanical Engineering Technology - Automotive Product Design&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sport &amp; Recreation Management&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;Fitness &amp; Health Promotion&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Academic and Career Entrance (Chatham)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Business Administration - Accounting / Business - Accounting&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Diagnostic Cardiac Sonography&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Honours Bachelor of Business Administration (Information Communication Technology)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Tourism - Travel&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Welding Techniques&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Calculation_551128017416663046:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Construciton Engineering Technician / Construciton Project Management&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Child and Youth Care&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Pharmacy Technician&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;Early Childhood Education&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Diagnostic Medical Sonography&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Others&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Dental Assisting Level I and II&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Fitness &amp; Health Promotion&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Business Administration - Human Resources&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;Biomedical Engineering Technology - Equipment and Devices&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:CourseCode:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;BME 506&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;FHT 206&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;DTL 175A&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;VET 311&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;MES 300&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;CPM 160&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;MDL 335&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;CNT 479N&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;PRM 306&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[City].[Name]' value='%null%' />
        <semantic-value key='[Country].[Name]' value='%null%' />
        <semantic-value key='[State].[Name]' value='%null%' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='placed.csv' id='placed.csv_13EFE2AA01274C27B19F21D1C8EE2644'>
            <properties context=''>
              <relation connection='textscan.0p4t2c71wk8nnj1atsk3r157n7ug' name='placed.csv' table='[placed#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_CA' separator=','>
                  <column datatype='string' name='ProgramName' ordinal='0' />
                  <column datatype='string' name='CourseCode' ordinal='1' />
                  <column datatype='string' name='WilType' ordinal='2' />
                  <column datatype='string' name='ContactName' ordinal='3' />
                  <column datatype='string' name='City' ordinal='4' />
                  <column datatype='real' name='StudentsPlacedFall22' ordinal='5' />
                  <column datatype='string' name='PAC/PLACE/CAREER' ordinal='6' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='CCPlaced'>
      <table>
        <view>
          <datasources>
            <datasource caption='placed' name='federated.16mspkp1407wzn1e4ix890eenso9' />
          </datasources>
          <datasource-dependencies datasource='federated.16mspkp1407wzn1e4ix890eenso9'>
            <column caption='Course Code' datatype='string' name='[CourseCode]' role='dimension' type='nominal' />
            <column datatype='real' name='[StudentsPlacedFall22]' role='measure' type='quantitative' />
            <column-instance column='[CourseCode]' derivation='None' name='[none:CourseCode:nk]' pivot='key' type='nominal' />
            <column-instance column='[StudentsPlacedFall22]' derivation='Sum' name='[sum:StudentsPlacedFall22:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.16mspkp1407wzn1e4ix890eenso9].[none:CourseCode:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:CourseCode:nk]' />
              <groupfilter function='member' level='[none:CourseCode:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.16mspkp1407wzn1e4ix890eenso9].[none:CourseCode:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.16mspkp1407wzn1e4ix890eenso9].[none:CourseCode:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' value='N' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.16mspkp1407wzn1e4ix890eenso9].[none:CourseCode:nk]</rows>
        <cols>[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]</cols>
      </table>
      <simple-id uuid='{5F8B7D24-59E9-4EE2-AF19-FD0B0418637F}' />
    </worksheet>
    <worksheet name='CityContactPlaced'>
      <table>
        <view>
          <datasources>
            <datasource caption='placed' name='federated.16mspkp1407wzn1e4ix890eenso9' />
          </datasources>
          <datasource-dependencies datasource='federated.16mspkp1407wzn1e4ix890eenso9'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <semantic-values semantic-role='[City].[Name]'>
                <semantic-value key='&quot;banff&quot;' value='&quot;Banff&quot;' />
                <semantic-value key='&quot;bath&quot;' value='&quot;Bathurst&quot;' />
                <semantic-value key='&quot;belle river&quot;' value='&quot;Lakeshore&quot;' />
                <semantic-value key='&quot;belleville&quot;' value='&quot;Belleville&quot;' />
                <semantic-value key='&quot;blenheim&quot;' value='&quot;Blandford-Blenheim&quot;' />
                <semantic-value key='&quot;bolton&quot;' value='&quot;Bolton-Ouest&quot;' />
                <semantic-value key='&quot;brampton&quot;' value='&quot;Brampton&quot;' />
                <semantic-value key='&quot;burlington&quot;' value='&quot;Burlington&quot;' />
                <semantic-value key='&quot;caledonia&quot;' value='&quot;Caledonia&quot;' />
                <semantic-value key='&quot;cambridge&quot;' value='&quot;Cambridge&quot;' />
                <semantic-value key='&quot;charing cross&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;cochrane&quot;' value='&quot;Cochrane&quot;' />
                <semantic-value key='&quot;collingwood&quot;' value='&quot;Collingwood&quot;' />
                <semantic-value key='&quot;comber&quot;' value='&quot;Lakeshore&quot;' />
                <semantic-value key='&quot;concord&quot;' value='&quot;Vaughan&quot;' />
                <semantic-value key='&quot;cornwall&quot;' value='&quot;Cornwall&quot;' />
                <semantic-value key='&quot;courtice&quot;' value='&quot;Oshawa&quot;' />
                <semantic-value key='&quot;cranbrook&quot;' value='&quot;Cranbrook&quot;' />
                <semantic-value key='&quot;dartmouth&quot;' value='&quot;Dartmouth&quot;' />
                <semantic-value key='&quot;dearborn&quot;' value='&quot;Dearborn&quot;' />
                <semantic-value key='&quot;dover centre&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;dresden&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;dryden&quot;' value='&quot;Dryden&quot;' />
                <semantic-value key='&quot;dundas&quot;' value='&quot;North Dundas&quot;' />
                <semantic-value key='&quot;dutton&quot;' value='&quot;Dutton/Dunwich&quot;' />
                <semantic-value key='&quot;edmonton&quot;' value='&quot;Edmonton&quot;' />
                <semantic-value key='&quot;essex&quot;' value='&quot;Essex&quot;' />
                <semantic-value key='&quot;etobicoke&quot;' value='&quot;Toronto&quot;' />
                <semantic-value key='&quot;georgetown&quot;' value='&quot;Georgetown&quot;' />
                <semantic-value key='&quot;geraldton&quot;' value='&quot;Greenstone&quot;' />
                <semantic-value key='&quot;golden&quot;' value='&quot;Golden&quot;' />
                <semantic-value key='&quot;grand valley&quot;' value='&quot;East Luther Grand Valley&quot;' />
                <semantic-value key='&quot;hamilton&quot;' value='&quot;Hamilton&quot;' />
                <semantic-value key='&quot;hanover&quot;' value='&quot;Hanover&quot;' />
                <semantic-value key='&quot;huntsville&quot;' value='&quot;Huntsville&quot;' />
                <semantic-value key='&quot;ilderton&quot;' value='&quot;London&quot;' />
                <semantic-value key='&quot;kanata&quot;' value='&quot;Ottawa&quot;' />
                <semantic-value key='&quot;kemptville&quot;' value='&quot;North Grenville&quot;' />
                <semantic-value key='&quot;kincardine&quot;' value='&quot;Kincardine&quot;' />
                <semantic-value key='&quot;kingston&quot;' value='&quot;Kingston&quot;' />
                <semantic-value key='&quot;kingsville&quot;' value='&quot;Kingsville&quot;' />
                <semantic-value key='&quot;komoka&quot;' value='&quot;London&quot;' />
                <semantic-value key='&quot;lakeshore&quot;' value='&quot;Lakeshore&quot;' />
                <semantic-value key='&quot;lasalle&quot;' value='&quot;Windsor&quot;' />
                <semantic-value key='&quot;lasalle.&quot;' value='&quot;Windsor&quot;' />
                <semantic-value key='&quot;leamington&quot;' value='&quot;Leamington&quot;' />
                <semantic-value key='&quot;listowell&quot;' value='&quot;North Perth&quot;' />
                <semantic-value key='&quot;london&quot;' value='&quot;London&quot;' />
                <semantic-value key='&quot;lucan&quot;' value='&quot;Lucan Biddulph&quot;' />
                <semantic-value key='&quot;maidstone&quot;' value='&quot;Lakeshore&quot;' />
                <semantic-value key='&quot;markham&quot;' value='&quot;Markham&quot;' />
                <semantic-value key='&quot;merlin&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;mirabel&quot;' value='&quot;Mirabel&quot;' />
                <semantic-value key='&quot;mitchell&quot;' value='&quot;West Perth&quot;' />
                <semantic-value key='&quot;montreal&quot;' value='&quot;Montreal&quot;' />
                <semantic-value key='&quot;morrisburg&quot;' value='&quot;South Dundas&quot;' />
                <semantic-value key='&quot;new hamburg&quot;' value='&quot;Wilmot&quot;' />
                <semantic-value key='&quot;niagara&quot;' value='&quot;Niagara-On-The-Lake&quot;' />
                <semantic-value key='&quot;north bay&quot;' value='&quot;North Bay&quot;' />
                <semantic-value key='&quot;oakville&quot;' value='&quot;Oakville&quot;' />
                <semantic-value key='&quot;oldcastle&quot;' value='&quot;Tecumseh&quot;' />
                <semantic-value key='&quot;orangeville&quot;' value='&quot;Orangeville&quot;' />
                <semantic-value key='&quot;orléans&quot;' value='&quot;Ottawa&quot;' />
                <semantic-value key='&quot;oshawa&quot;' value='&quot;Oshawa&quot;' />
                <semantic-value key='&quot;ottawa&quot;' value='&quot;Ottawa&quot;' />
                <semantic-value key='&quot;paris&quot;' value='&quot;Brant&quot;' />
                <semantic-value key='&quot;pelee island&quot;' value='&quot;Pelee&quot;' />
                <semantic-value key='&quot;pembroke&quot;' value='&quot;Pembroke&quot;' />
                <semantic-value key='&quot;peterborough&quot;' value='&quot;Peterborough&quot;' />
                <semantic-value key='&quot;petrolia&quot;' value='&quot;Petrolia&quot;' />
                <semantic-value key='&quot;point edward&quot;' value='&quot;Point Edward&quot;' />
                <semantic-value key='&quot;port hope&quot;' value='&quot;Port Hope&quot;' />
                <semantic-value key='&quot;richmond hill&quot;' value='&quot;Richmond Hill&quot;' />
                <semantic-value key='&quot;ridgetown&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;ruthven&quot;' value='&quot;Kingsville&quot;' />
                <semantic-value key='&quot;sarnia&quot;' value='&quot;Sarnia&quot;' />
                <semantic-value key='&quot;sault ste. marie&quot;' value='&quot;Sault Ste. Marie&quot;' />
                <semantic-value key='&quot;scarborough&quot;' value='&quot;Toronto&quot;' />
                <semantic-value key='&quot;shelburne&quot;' value='&quot;Shelburne&quot;' />
                <semantic-value key='&quot;southfield&quot;' value='&quot;Southfield&quot;' />
                <semantic-value key='&quot;st. marys&quot;' value='&quot;Perth South&quot;' />
                <semantic-value key='&quot;stoney creek&quot;' value='&quot;Hamilton&quot;' />
                <semantic-value key='&quot;stoney point&quot;' value='&quot;Lakeshore&quot;' />
                <semantic-value key='&quot;stratford&quot;' value='&quot;Stratford&quot;' />
                <semantic-value key='&quot;strathroy&quot;' value='&quot;Strathroy-Caradoc&quot;' />
                <semantic-value key='&quot;sudbury&quot;' value='&quot;Sudbury&quot;' />
                <semantic-value key='&quot;taylor&quot;' value='&quot;Taylor&quot;' />
                <semantic-value key='&quot;tecumseh&quot;' value='&quot;Tecumseh&quot;' />
                <semantic-value key='&quot;thamesville&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;thornhill&quot;' value='&quot;York&quot;' />
                <semantic-value key='&quot;tilbury&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;toronto&quot;' value='&quot;Toronto&quot;' />
                <semantic-value key='&quot;vancouver&quot;' value='&quot;Vancouver&quot;' />
                <semantic-value key='&quot;vaughan&quot;' value='&quot;Vaughan&quot;' />
                <semantic-value key='&quot;victoria&quot;' value='&quot;Victoria&quot;' />
                <semantic-value key='&quot;wallacbeurg&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;wallaceburg&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;warren&quot;' value='&quot;Warren&quot;' />
                <semantic-value key='&quot;waterford&quot;' value='&quot;New Waterford&quot;' />
                <semantic-value key='&quot;waterloo&quot;' value='&quot;Waterloo&quot;' />
                <semantic-value key='&quot;wheatley&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;whitby&quot;' value='&quot;Whitby&quot;' />
                <semantic-value key='&quot;winchester&quot;' value='&quot;North Dundas&quot;' />
                <semantic-value key='&quot;windsor&quot;' value='&quot;Windsor&quot;' />
                <semantic-value key='&quot;wingham&quot;' value='&quot;North Huron&quot;' />
                <semantic-value key='&quot;woodslee&quot;' value='&quot;Lakeshore&quot;' />
                <semantic-value key='&quot;woodstock&quot;' value='&quot;Woodstock&quot;' />
                <semantic-value key='&quot;wyoming&quot;' value='&quot;Plympton-Wyoming&quot;' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Latitude]'>
                <semantic-value key='&quot;alliston&quot;' value='44.151299999999999' />
                <semantic-value key='&quot;arkona&quot;' value='43.073999999999998' />
                <semantic-value key='&quot;belwoodtario&quot;' value='43.7941' />
                <semantic-value key='&quot;chapleau&quot;' value='47.842300000000002' />
                <semantic-value key='&quot;corunna&quot;' value='42.884700000000002' />
                <semantic-value key='&quot;courtright&quot;' value='42.816667000000002' />
                <semantic-value key='&quot;emeryville&quot;' value='42.296799999999998' />
                <semantic-value key='&quot;fergus&quot;' value='43.706000000000003' />
                <semantic-value key='&quot;glencoe&quot;' value='42.747300000000003' />
                <semantic-value key='&quot;grand bend&quot;' value='43.315600000000003' />
                <semantic-value key='&quot;gta&quot;' value='44.038400000000003' />
                <semantic-value key='&quot;hagersville&quot;' value='42.959899999999998' />
                <semantic-value key='&quot;hiuntsville&quot;' value='45.326900000000002' />
                <semantic-value key='&quot;minett&quot;' value='45.163200000000003' />
                <semantic-value key='&quot;mooretown&quot;' value='42.841799999999999' />
                <semantic-value key='&quot;morriston&quot;' value='43.448300000000003' />
                <semantic-value key='&quot;mount brydges&quot;' value='42.909700000000001' />
                <semantic-value key='&quot;newbury&quot;' value='42.6845' />
                <semantic-value key='&quot;newmarket&quot;' value='44.059199999999997' />
                <semantic-value key='&quot;pakenham&quot;' value='45.332999999999998' />
                <semantic-value key='&quot;port perry&quot;' value='44.104999999999997' />
                <semantic-value key='&quot;st. thomas&quot;' value='42.777700000000003' />
                <semantic-value key='&quot;staples&quot;' value='42.171100000000003' />
                <semantic-value key='&quot;trois-rivières&quot;' value='46.343000000000004' />
                <semantic-value key='&quot;watford&quot;' value='42.955500000000001' />
                <semantic-value key='&quot;west lorne&quot;' value='42.6038' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Longitude]'>
                <semantic-value key='&quot;alliston&quot;' value='-79.874399999999994' />
                <semantic-value key='&quot;arkona&quot;' value='-81.830600000000004' />
                <semantic-value key='&quot;belwoodtario&quot;' value='-80.322500000000005' />
                <semantic-value key='&quot;chapleau&quot;' value='-83.402600000000007' />
                <semantic-value key='&quot;corunna&quot;' value='-82.450900000000004' />
                <semantic-value key='&quot;courtright&quot;' value='-82.466667000000001' />
                <semantic-value key='&quot;emeryville&quot;' value='-82.760300000000001' />
                <semantic-value key='&quot;fergus&quot;' value='-80.377799999999993' />
                <semantic-value key='&quot;glencoe&quot;' value='-81.709500000000006' />
                <semantic-value key='&quot;grand bend&quot;' value='-81.764499999999998' />
                <semantic-value key='&quot;gta&quot;' value='-79.200000000000003' />
                <semantic-value key='&quot;hagersville&quot;' value='-80.052300000000002' />
                <semantic-value key='&quot;hiuntsville&quot;' value='-79.216800000000006' />
                <semantic-value key='&quot;minett&quot;' value='-79.653300000000002' />
                <semantic-value key='&quot;mooretown&quot;' value='-82.461699999999993' />
                <semantic-value key='&quot;morriston&quot;' value='-80.117199999999997' />
                <semantic-value key='&quot;mount brydges&quot;' value='-81.495900000000006' />
                <semantic-value key='&quot;newbury&quot;' value='-81.797799999999995' />
                <semantic-value key='&quot;newmarket&quot;' value='-79.461299999999994' />
                <semantic-value key='&quot;pakenham&quot;' value='-76.290400000000005' />
                <semantic-value key='&quot;port perry&quot;' value='-78.944100000000006' />
                <semantic-value key='&quot;st. thomas&quot;' value='-81.182699999999997' />
                <semantic-value key='&quot;staples&quot;' value='-82.593500000000006' />
                <semantic-value key='&quot;trois-rivières&quot;' value='-72.542100000000005' />
                <semantic-value key='&quot;watford&quot;' value='-81.879900000000006' />
                <semantic-value key='&quot;west lorne&quot;' value='-81.606700000000004' />
              </semantic-values>
            </column>
            <column caption='Contact Name' datatype='string' name='[ContactName]' role='dimension' semantic-role='' type='nominal' />
            <column datatype='real' name='[StudentsPlacedFall22]' role='measure' type='quantitative' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[ContactName]' derivation='None' name='[none:ContactName:nk]' pivot='key' type='nominal' />
            <column-instance column='[StudentsPlacedFall22]' derivation='Sum' name='[sum:StudentsPlacedFall22:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.16mspkp1407wzn1e4ix890eenso9].[none:City:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:City:nk]' />
              <groupfilter function='member' level='[none:City:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.16mspkp1407wzn1e4ix890eenso9].[none:ContactName:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([StudentsPlacedFall22])' function='order' user:ui-marker='order'>
                <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='level-members' level='[none:ContactName:nk]' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;(Irshad-Ul (Irshad) Haq&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;*Bart Di Giovanni&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;*Joe Lepera&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;*Nick Rosati&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;*Piero Aleo&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;*Ralph Meo&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;0&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Aaron Nathan&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Adnan Boodwala&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Adrian&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Albert Schepers&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Alyssia Isabella&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Amanda Freiburger&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Amanda Thurston&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Amber Tremblay-Gerada&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Andrea Lyons&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Andrew McPherson&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Andy&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Angela Legace&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Angelo Gentili&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Anisha Nayar&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Anita&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Anita Victor&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Anne Stevens, Professional Practice&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Anthony Mastrodicasa&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Anthony Pupatello&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Atif Moin&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Azhar Omarjee&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Barb Stamatinos / Ronda Zalewski&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Becker&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Ben&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Bill Lester&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Boris&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Boula&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Brad Way&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Brian Bartlett&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Brian Klundert&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Brian Towsley&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Brooklyn&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Carla Marsden, RPhT&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Carrie Mady&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Celina Ussoletti&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Charlie&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Charlie Hotham&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Cheryl Pfaff, HR Advisor&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Chintan J. Virani&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Chris Mannina&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Chris Weller&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Christine Ziter&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Cindy Le&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Craig St.Jean&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Curtis Anderson&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Dan Krutsch&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Dan Pipitone&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Dan Russ&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Danielle Fan&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Danielle Spadafora&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Danny Azar&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Darrin John&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Dave Halliday&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Dave Medved&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Dave Mussio&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Dave Sinewitz&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;David&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;David Colle&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;David Lester&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;David McCloskey&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;David Schwartz&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;David Skillings&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Davina&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Deniz Orak&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Dennis Huntley&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Derek Astbury&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Derek DiDonato&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Derek, Student Relations&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Diane Byrne&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Diane Ruthven&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Don Cullen&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Dorothy (Hoi Man) Leung&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Dory Azar&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Doug Taylor&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Dr. Mohammad Haqqi&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Drew Coulson&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Duncan Wilson&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;E.P.&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Ed Cope&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Ed Habib&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Elisa Braccio, Owner&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Ennio Sperduti&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Erwin Singh&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Fiona Coughlin&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Fonda Asprakis/Sarah Mallott&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Francis Roy&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Frank Dayus&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Franz Dalla Bona&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;George Christoff&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;George Elachkar&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Gina Read&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Gino Piccioni&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Giuliana Hinchliffe&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Greg Chiarcos&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Greg Drouillard&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Greg Koppeser&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Heather Chase&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Ian Furlonger&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Jackie&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Jamey Gilroy&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Jamie Greco, RPht&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Jasjit Garcha (owner of all 3 sites, primary contact asdm1112@shoppersdrugmart.ca)&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Jason Spina&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Jason Thomas&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Jason Thomas &quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Jeannie&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Jeff Boivin&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Jeff Malott&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Jeff Nawalany&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Jenna Maisonville&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Jeremiah Baker&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Jessica Drover, HR Manager&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Jessica Gardonio&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Jillian Hicks-McClary&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Jo Ann Foote&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Joe Rauti&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Joe Santarossa Jr.&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Joe Varacalli&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;John Atwan&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;John Gawdunyk&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Johnny Ramadan&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Jolaine McAvoy&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Jordan Casey&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Jordan Elhabi&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Josie&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Juliet&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Justin Marchand&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Kameron&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Keith Nichol&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Kelly Woods&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Ken Kapusniak&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Kenten Puryk&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Kevin Nielson&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Kevyn Janisse&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Kim Jozkow&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Kiranjit Chadha&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Kris Mask&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Kristy Osborne&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Kyle&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Lee Bigaouette&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Lou Savoni&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Louis Coco&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Luc Pignal&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Lucas Garby&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Luciano Barcsai&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Lyn Sarceda, Education Coordinator&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Maddy Boughner&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Marc Dean&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Marc Masotti&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Marc Rivest/David Johnson&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Marcel Morin&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Marianne Lalka&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Mark Gibson, Student Engagement; Becky Lau, Pharmacy Supervisor&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Mark Popkey&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Marty Gaudet&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Massimo Carlesimo&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Matthew Thibert&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Melanie Norton&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Merissa Mills&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Michael DiMaio&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Michael Piroli&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Michell Truong&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Michelle Wilson&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Mike Coombs&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Mike Quaggiotto&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Mike Vagi&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Mike Vannie / Joshua Meloche&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Miranda&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Mo Thomson&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Mohamed Ali&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Mohammed Manjra&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Mohit Singla&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Monica Brotto&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Nada&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Nadeem Aslam&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Nancy Rochon&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Natalie Saby&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Neil&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Nekpen Asemota&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Nick Marcovecchio&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Nick Morrison&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Nicole Menard&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Olivia McGrath&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Paul&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Paul Phillips&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Perr Cruz&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Perry Wong&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Peter Adams, Owner&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Peter Giuliani&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Peter Indelicato&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Peter Letkeman&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Peter Valente / Sarah Carriere&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Philip Monaco&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Radwan Tamr&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Ray Nascimento&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Richard Rauth&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Rick Austin&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Rick Spencer&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Rimma Dmitrijeva&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Rob D&apos;Alimonte&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Rob Fuller&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Rob Hicks / Dave Carr&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Rob Modestino, Owner&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Robert DiMaio&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Robyn&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Rocco Lucente&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Rod Hebert&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Rodrigo Mazza&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Roy Simone&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Ryan Roach&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Sabrina Bilyk&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Sal Costante&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Samantha Hoole&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Sandra Larose&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Sandra Marcoux&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Sebastiano DiPietro&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Shawn Kelly&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Shawn Magone&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Shelley Murphy, RPhT&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Sheri Digiovanni &quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Sheri Shultis&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Simona&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Stan Francic&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Steffany&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Stephen Hook&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Steve Crawford&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Steve Zold&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Steven Bural, Sophia (Director)&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Steven Valente&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Sukhy&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Taylor Allen&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Terry M.&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Thaddeus Molnar&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;TK&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Tony Berardi&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Tony Boudreau&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Tony Masciotra&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Tony Santarossa&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Troy Lofthouse&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Vicki Collavino&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Vince Lapico&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Walter Branco&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Wayne Dupuis&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Wilbur Mulder&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Yolanda Stanzak&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Yvette Tetzlaff &quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;Yvette Tetzlaff (Cell) 5198905104&quot;' />
                    <groupfilter function='member' level='[none:ContactName:nk]' member='%null%' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.16mspkp1407wzn1e4ix890eenso9].[none:ContactName:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.16mspkp1407wzn1e4ix890eenso9].[none:City:nk]</column>
            <column>[federated.16mspkp1407wzn1e4ix890eenso9].[none:ContactName:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' value='N' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.16mspkp1407wzn1e4ix890eenso9].[none:City:nk]' />
              <text column='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.16mspkp1407wzn1e4ix890eenso9].[none:ContactName:nk]</rows>
        <cols>[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]</cols>
      </table>
      <simple-id uuid='{6CAE8521-1282-4362-846D-6494A663C390}' />
    </worksheet>
    <worksheet name='CityCoursePlaced'>
      <table>
        <view>
          <datasources>
            <datasource caption='placed' name='federated.16mspkp1407wzn1e4ix890eenso9' />
          </datasources>
          <datasource-dependencies datasource='federated.16mspkp1407wzn1e4ix890eenso9'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <semantic-values semantic-role='[City].[Name]'>
                <semantic-value key='&quot;banff&quot;' value='&quot;Banff&quot;' />
                <semantic-value key='&quot;bath&quot;' value='&quot;Bathurst&quot;' />
                <semantic-value key='&quot;belle river&quot;' value='&quot;Lakeshore&quot;' />
                <semantic-value key='&quot;belleville&quot;' value='&quot;Belleville&quot;' />
                <semantic-value key='&quot;blenheim&quot;' value='&quot;Blandford-Blenheim&quot;' />
                <semantic-value key='&quot;bolton&quot;' value='&quot;Bolton-Ouest&quot;' />
                <semantic-value key='&quot;brampton&quot;' value='&quot;Brampton&quot;' />
                <semantic-value key='&quot;burlington&quot;' value='&quot;Burlington&quot;' />
                <semantic-value key='&quot;caledonia&quot;' value='&quot;Caledonia&quot;' />
                <semantic-value key='&quot;cambridge&quot;' value='&quot;Cambridge&quot;' />
                <semantic-value key='&quot;charing cross&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;cochrane&quot;' value='&quot;Cochrane&quot;' />
                <semantic-value key='&quot;collingwood&quot;' value='&quot;Collingwood&quot;' />
                <semantic-value key='&quot;comber&quot;' value='&quot;Lakeshore&quot;' />
                <semantic-value key='&quot;concord&quot;' value='&quot;Vaughan&quot;' />
                <semantic-value key='&quot;cornwall&quot;' value='&quot;Cornwall&quot;' />
                <semantic-value key='&quot;courtice&quot;' value='&quot;Oshawa&quot;' />
                <semantic-value key='&quot;cranbrook&quot;' value='&quot;Cranbrook&quot;' />
                <semantic-value key='&quot;dartmouth&quot;' value='&quot;Dartmouth&quot;' />
                <semantic-value key='&quot;dearborn&quot;' value='&quot;Dearborn&quot;' />
                <semantic-value key='&quot;dover centre&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;dresden&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;dryden&quot;' value='&quot;Dryden&quot;' />
                <semantic-value key='&quot;dundas&quot;' value='&quot;North Dundas&quot;' />
                <semantic-value key='&quot;dutton&quot;' value='&quot;Dutton/Dunwich&quot;' />
                <semantic-value key='&quot;edmonton&quot;' value='&quot;Edmonton&quot;' />
                <semantic-value key='&quot;essex&quot;' value='&quot;Essex&quot;' />
                <semantic-value key='&quot;etobicoke&quot;' value='&quot;Toronto&quot;' />
                <semantic-value key='&quot;georgetown&quot;' value='&quot;Georgetown&quot;' />
                <semantic-value key='&quot;geraldton&quot;' value='&quot;Greenstone&quot;' />
                <semantic-value key='&quot;golden&quot;' value='&quot;Golden&quot;' />
                <semantic-value key='&quot;grand valley&quot;' value='&quot;East Luther Grand Valley&quot;' />
                <semantic-value key='&quot;hamilton&quot;' value='&quot;Hamilton&quot;' />
                <semantic-value key='&quot;hanover&quot;' value='&quot;Hanover&quot;' />
                <semantic-value key='&quot;huntsville&quot;' value='&quot;Huntsville&quot;' />
                <semantic-value key='&quot;ilderton&quot;' value='&quot;London&quot;' />
                <semantic-value key='&quot;kanata&quot;' value='&quot;Ottawa&quot;' />
                <semantic-value key='&quot;kemptville&quot;' value='&quot;North Grenville&quot;' />
                <semantic-value key='&quot;kincardine&quot;' value='&quot;Kincardine&quot;' />
                <semantic-value key='&quot;kingston&quot;' value='&quot;Kingston&quot;' />
                <semantic-value key='&quot;kingsville&quot;' value='&quot;Kingsville&quot;' />
                <semantic-value key='&quot;komoka&quot;' value='&quot;London&quot;' />
                <semantic-value key='&quot;lakeshore&quot;' value='&quot;Lakeshore&quot;' />
                <semantic-value key='&quot;lasalle&quot;' value='&quot;Windsor&quot;' />
                <semantic-value key='&quot;lasalle.&quot;' value='&quot;Windsor&quot;' />
                <semantic-value key='&quot;leamington&quot;' value='&quot;Leamington&quot;' />
                <semantic-value key='&quot;listowell&quot;' value='&quot;North Perth&quot;' />
                <semantic-value key='&quot;london&quot;' value='&quot;London&quot;' />
                <semantic-value key='&quot;lucan&quot;' value='&quot;Lucan Biddulph&quot;' />
                <semantic-value key='&quot;maidstone&quot;' value='&quot;Lakeshore&quot;' />
                <semantic-value key='&quot;markham&quot;' value='&quot;Markham&quot;' />
                <semantic-value key='&quot;merlin&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;mirabel&quot;' value='&quot;Mirabel&quot;' />
                <semantic-value key='&quot;mitchell&quot;' value='&quot;West Perth&quot;' />
                <semantic-value key='&quot;montreal&quot;' value='&quot;Montreal&quot;' />
                <semantic-value key='&quot;morrisburg&quot;' value='&quot;South Dundas&quot;' />
                <semantic-value key='&quot;new hamburg&quot;' value='&quot;Wilmot&quot;' />
                <semantic-value key='&quot;niagara&quot;' value='&quot;Niagara-On-The-Lake&quot;' />
                <semantic-value key='&quot;north bay&quot;' value='&quot;North Bay&quot;' />
                <semantic-value key='&quot;oakville&quot;' value='&quot;Oakville&quot;' />
                <semantic-value key='&quot;oldcastle&quot;' value='&quot;Tecumseh&quot;' />
                <semantic-value key='&quot;orangeville&quot;' value='&quot;Orangeville&quot;' />
                <semantic-value key='&quot;orléans&quot;' value='&quot;Ottawa&quot;' />
                <semantic-value key='&quot;oshawa&quot;' value='&quot;Oshawa&quot;' />
                <semantic-value key='&quot;ottawa&quot;' value='&quot;Ottawa&quot;' />
                <semantic-value key='&quot;paris&quot;' value='&quot;Brant&quot;' />
                <semantic-value key='&quot;pelee island&quot;' value='&quot;Pelee&quot;' />
                <semantic-value key='&quot;pembroke&quot;' value='&quot;Pembroke&quot;' />
                <semantic-value key='&quot;peterborough&quot;' value='&quot;Peterborough&quot;' />
                <semantic-value key='&quot;petrolia&quot;' value='&quot;Petrolia&quot;' />
                <semantic-value key='&quot;point edward&quot;' value='&quot;Point Edward&quot;' />
                <semantic-value key='&quot;port hope&quot;' value='&quot;Port Hope&quot;' />
                <semantic-value key='&quot;richmond hill&quot;' value='&quot;Richmond Hill&quot;' />
                <semantic-value key='&quot;ridgetown&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;ruthven&quot;' value='&quot;Kingsville&quot;' />
                <semantic-value key='&quot;sarnia&quot;' value='&quot;Sarnia&quot;' />
                <semantic-value key='&quot;sault ste. marie&quot;' value='&quot;Sault Ste. Marie&quot;' />
                <semantic-value key='&quot;scarborough&quot;' value='&quot;Toronto&quot;' />
                <semantic-value key='&quot;shelburne&quot;' value='&quot;Shelburne&quot;' />
                <semantic-value key='&quot;southfield&quot;' value='&quot;Southfield&quot;' />
                <semantic-value key='&quot;st. marys&quot;' value='&quot;Perth South&quot;' />
                <semantic-value key='&quot;stoney creek&quot;' value='&quot;Hamilton&quot;' />
                <semantic-value key='&quot;stoney point&quot;' value='&quot;Lakeshore&quot;' />
                <semantic-value key='&quot;stratford&quot;' value='&quot;Stratford&quot;' />
                <semantic-value key='&quot;strathroy&quot;' value='&quot;Strathroy-Caradoc&quot;' />
                <semantic-value key='&quot;sudbury&quot;' value='&quot;Sudbury&quot;' />
                <semantic-value key='&quot;taylor&quot;' value='&quot;Taylor&quot;' />
                <semantic-value key='&quot;tecumseh&quot;' value='&quot;Tecumseh&quot;' />
                <semantic-value key='&quot;thamesville&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;thornhill&quot;' value='&quot;York&quot;' />
                <semantic-value key='&quot;tilbury&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;toronto&quot;' value='&quot;Toronto&quot;' />
                <semantic-value key='&quot;vancouver&quot;' value='&quot;Vancouver&quot;' />
                <semantic-value key='&quot;vaughan&quot;' value='&quot;Vaughan&quot;' />
                <semantic-value key='&quot;victoria&quot;' value='&quot;Victoria&quot;' />
                <semantic-value key='&quot;wallacbeurg&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;wallaceburg&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;warren&quot;' value='&quot;Warren&quot;' />
                <semantic-value key='&quot;waterford&quot;' value='&quot;New Waterford&quot;' />
                <semantic-value key='&quot;waterloo&quot;' value='&quot;Waterloo&quot;' />
                <semantic-value key='&quot;wheatley&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;whitby&quot;' value='&quot;Whitby&quot;' />
                <semantic-value key='&quot;winchester&quot;' value='&quot;North Dundas&quot;' />
                <semantic-value key='&quot;windsor&quot;' value='&quot;Windsor&quot;' />
                <semantic-value key='&quot;wingham&quot;' value='&quot;North Huron&quot;' />
                <semantic-value key='&quot;woodslee&quot;' value='&quot;Lakeshore&quot;' />
                <semantic-value key='&quot;woodstock&quot;' value='&quot;Woodstock&quot;' />
                <semantic-value key='&quot;wyoming&quot;' value='&quot;Plympton-Wyoming&quot;' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Latitude]'>
                <semantic-value key='&quot;alliston&quot;' value='44.151299999999999' />
                <semantic-value key='&quot;arkona&quot;' value='43.073999999999998' />
                <semantic-value key='&quot;belwoodtario&quot;' value='43.7941' />
                <semantic-value key='&quot;chapleau&quot;' value='47.842300000000002' />
                <semantic-value key='&quot;corunna&quot;' value='42.884700000000002' />
                <semantic-value key='&quot;courtright&quot;' value='42.816667000000002' />
                <semantic-value key='&quot;emeryville&quot;' value='42.296799999999998' />
                <semantic-value key='&quot;fergus&quot;' value='43.706000000000003' />
                <semantic-value key='&quot;glencoe&quot;' value='42.747300000000003' />
                <semantic-value key='&quot;grand bend&quot;' value='43.315600000000003' />
                <semantic-value key='&quot;gta&quot;' value='44.038400000000003' />
                <semantic-value key='&quot;hagersville&quot;' value='42.959899999999998' />
                <semantic-value key='&quot;hiuntsville&quot;' value='45.326900000000002' />
                <semantic-value key='&quot;minett&quot;' value='45.163200000000003' />
                <semantic-value key='&quot;mooretown&quot;' value='42.841799999999999' />
                <semantic-value key='&quot;morriston&quot;' value='43.448300000000003' />
                <semantic-value key='&quot;mount brydges&quot;' value='42.909700000000001' />
                <semantic-value key='&quot;newbury&quot;' value='42.6845' />
                <semantic-value key='&quot;newmarket&quot;' value='44.059199999999997' />
                <semantic-value key='&quot;pakenham&quot;' value='45.332999999999998' />
                <semantic-value key='&quot;port perry&quot;' value='44.104999999999997' />
                <semantic-value key='&quot;st. thomas&quot;' value='42.777700000000003' />
                <semantic-value key='&quot;staples&quot;' value='42.171100000000003' />
                <semantic-value key='&quot;trois-rivières&quot;' value='46.343000000000004' />
                <semantic-value key='&quot;watford&quot;' value='42.955500000000001' />
                <semantic-value key='&quot;west lorne&quot;' value='42.6038' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Longitude]'>
                <semantic-value key='&quot;alliston&quot;' value='-79.874399999999994' />
                <semantic-value key='&quot;arkona&quot;' value='-81.830600000000004' />
                <semantic-value key='&quot;belwoodtario&quot;' value='-80.322500000000005' />
                <semantic-value key='&quot;chapleau&quot;' value='-83.402600000000007' />
                <semantic-value key='&quot;corunna&quot;' value='-82.450900000000004' />
                <semantic-value key='&quot;courtright&quot;' value='-82.466667000000001' />
                <semantic-value key='&quot;emeryville&quot;' value='-82.760300000000001' />
                <semantic-value key='&quot;fergus&quot;' value='-80.377799999999993' />
                <semantic-value key='&quot;glencoe&quot;' value='-81.709500000000006' />
                <semantic-value key='&quot;grand bend&quot;' value='-81.764499999999998' />
                <semantic-value key='&quot;gta&quot;' value='-79.200000000000003' />
                <semantic-value key='&quot;hagersville&quot;' value='-80.052300000000002' />
                <semantic-value key='&quot;hiuntsville&quot;' value='-79.216800000000006' />
                <semantic-value key='&quot;minett&quot;' value='-79.653300000000002' />
                <semantic-value key='&quot;mooretown&quot;' value='-82.461699999999993' />
                <semantic-value key='&quot;morriston&quot;' value='-80.117199999999997' />
                <semantic-value key='&quot;mount brydges&quot;' value='-81.495900000000006' />
                <semantic-value key='&quot;newbury&quot;' value='-81.797799999999995' />
                <semantic-value key='&quot;newmarket&quot;' value='-79.461299999999994' />
                <semantic-value key='&quot;pakenham&quot;' value='-76.290400000000005' />
                <semantic-value key='&quot;port perry&quot;' value='-78.944100000000006' />
                <semantic-value key='&quot;st. thomas&quot;' value='-81.182699999999997' />
                <semantic-value key='&quot;staples&quot;' value='-82.593500000000006' />
                <semantic-value key='&quot;trois-rivières&quot;' value='-72.542100000000005' />
                <semantic-value key='&quot;watford&quot;' value='-81.879900000000006' />
                <semantic-value key='&quot;west lorne&quot;' value='-81.606700000000004' />
              </semantic-values>
            </column>
            <column caption='Course Code' datatype='string' name='[CourseCode]' role='dimension' type='nominal' />
            <column datatype='real' name='[StudentsPlacedFall22]' role='measure' type='quantitative' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[CourseCode]' derivation='None' name='[none:CourseCode:nk]' pivot='key' type='nominal' />
            <column-instance column='[StudentsPlacedFall22]' derivation='Sum' name='[sum:StudentsPlacedFall22:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.16mspkp1407wzn1e4ix890eenso9].[none:City:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([StudentsPlacedFall22])' function='order' user:ui-marker='order'>
                <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
                  <groupfilter function='level-members' level='[none:City:nk]' />
                  <groupfilter function='member' level='[none:City:nk]' member='%null%' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.16mspkp1407wzn1e4ix890eenso9].[none:CourseCode:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:CourseCode:nk]' />
              <groupfilter function='member' level='[none:CourseCode:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.16mspkp1407wzn1e4ix890eenso9].[none:City:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.16mspkp1407wzn1e4ix890eenso9].[none:CourseCode:nk]</column>
            <column>[federated.16mspkp1407wzn1e4ix890eenso9].[none:City:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' value='N' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.16mspkp1407wzn1e4ix890eenso9].[none:CourseCode:nk]' />
              <text column='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-size' value='8' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-mode' value='all' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.16mspkp1407wzn1e4ix890eenso9].[none:City:nk]</rows>
        <cols>[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]</cols>
      </table>
      <simple-id uuid='{FF729D9E-C062-421E-8051-C33B80499183}' />
    </worksheet>
    <worksheet name='ContProgPlaced'>
      <table>
        <view>
          <datasources>
            <datasource caption='placed' name='federated.16mspkp1407wzn1e4ix890eenso9' />
          </datasources>
          <datasource-dependencies datasource='federated.16mspkp1407wzn1e4ix890eenso9'>
            <column caption='Contact Name' datatype='string' name='[ContactName]' role='dimension' semantic-role='' type='nominal' />
            <column caption='Program Name' datatype='string' name='[ProgramName]' role='dimension' type='nominal' />
            <column datatype='real' name='[StudentsPlacedFall22]' role='measure' type='quantitative' />
            <column-instance column='[ContactName]' derivation='None' name='[none:ContactName:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProgramName]' derivation='None' name='[none:ProgramName:nk]' pivot='key' type='nominal' />
            <column-instance column='[StudentsPlacedFall22]' derivation='Sum' name='[sum:StudentsPlacedFall22:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.16mspkp1407wzn1e4ix890eenso9].[none:ContactName:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([StudentsPlacedFall22])' function='order' user:ui-marker='order'>
                <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
                  <groupfilter function='level-members' level='[none:ContactName:nk]' />
                  <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;0&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.16mspkp1407wzn1e4ix890eenso9].[none:ContactName:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.16mspkp1407wzn1e4ix890eenso9].[none:ContactName:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' value='N' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.16mspkp1407wzn1e4ix890eenso9].[none:ProgramName:nk]' />
              <lod column='[federated.16mspkp1407wzn1e4ix890eenso9].[none:ProgramName:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]</rows>
        <cols>[federated.16mspkp1407wzn1e4ix890eenso9].[none:ContactName:nk]</cols>
      </table>
      <simple-id uuid='{4B85CF18-27C6-481C-A47D-788481542CF5}' />
    </worksheet>
    <worksheet name='ContactPlace'>
      <table>
        <view>
          <datasources>
            <datasource caption='placed' name='federated.16mspkp1407wzn1e4ix890eenso9' />
          </datasources>
          <datasource-dependencies datasource='federated.16mspkp1407wzn1e4ix890eenso9'>
            <column caption='Contact Name' datatype='string' name='[ContactName]' role='dimension' semantic-role='' type='nominal' />
            <column caption='Pac/Place/Career' datatype='string' name='[PAC/PLACE/CAREER]' role='dimension' type='nominal' />
            <column datatype='real' name='[StudentsPlacedFall22]' role='measure' type='quantitative' />
            <column-instance column='[ContactName]' derivation='None' name='[none:ContactName:nk]' pivot='key' type='nominal' />
            <column-instance column='[StudentsPlacedFall22]' derivation='Sum' name='[sum:StudentsPlacedFall22:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.16mspkp1407wzn1e4ix890eenso9].[none:ContactName:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNT([PAC/PLACE/CAREER])' function='order' user:ui-marker='order'>
                <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
                  <groupfilter function='level-members' level='[none:ContactName:nk]' />
                  <groupfilter function='member' level='[none:ContactName:nk]' member='&quot;0&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.16mspkp1407wzn1e4ix890eenso9].[none:ContactName:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.16mspkp1407wzn1e4ix890eenso9].[none:ContactName:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' value='N' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' palette='green_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' />
              <text column='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]</rows>
        <cols>[federated.16mspkp1407wzn1e4ix890eenso9].[none:ContactName:nk]</cols>
      </table>
      <simple-id uuid='{F78FFAFC-F37B-4CA2-9F0A-A75DAF45939B}' />
    </worksheet>
    <worksheet name='PPCDistribution'>
      <table>
        <view>
          <datasources>
            <datasource caption='placed' name='federated.16mspkp1407wzn1e4ix890eenso9' />
          </datasources>
          <datasource-dependencies datasource='federated.16mspkp1407wzn1e4ix890eenso9'>
            <column caption='Pac/Place/Career' datatype='string' name='[PAC/PLACE/CAREER]' role='dimension' type='nominal' />
            <column-instance column='[PAC/PLACE/CAREER]' derivation='Count' name='[cnt:PAC/PLACE/CAREER:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PAC/PLACE/CAREER]' derivation='None' name='[none:PAC/PLACE/CAREER:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.16mspkp1407wzn1e4ix890eenso9].[none:PAC/PLACE/CAREER:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:PAC/PLACE/CAREER:nk]' />
              <groupfilter function='member' level='[none:PAC/PLACE/CAREER:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.16mspkp1407wzn1e4ix890eenso9].[none:PAC/PLACE/CAREER:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.16mspkp1407wzn1e4ix890eenso9].[cnt:PAC/PLACE/CAREER:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.16mspkp1407wzn1e4ix890eenso9].[none:PAC/PLACE/CAREER:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.16mspkp1407wzn1e4ix890eenso9].[none:PAC/PLACE/CAREER:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.16mspkp1407wzn1e4ix890eenso9].[cnt:PAC/PLACE/CAREER:qk]</rows>
        <cols>[federated.16mspkp1407wzn1e4ix890eenso9].[none:PAC/PLACE/CAREER:nk]</cols>
      </table>
      <simple-id uuid='{61213991-197C-4989-B101-0A93D4E10ED4}' />
    </worksheet>
    <worksheet name='PlacedbyCity'>
      <table>
        <view>
          <datasources>
            <datasource caption='placed' name='federated.16mspkp1407wzn1e4ix890eenso9' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.16mspkp1407wzn1e4ix890eenso9'>
            <column caption='TopCity' datatype='string' name='[Calculation_1352487276698451968]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF { FIXED [ProgramName]: SUM([StudentsPlacedFall22]) } &lt; 17 THEN &quot;Others&quot; ELSE [City] END' />
            </column>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <semantic-values semantic-role='[City].[Name]'>
                <semantic-value key='&quot;banff&quot;' value='&quot;Banff&quot;' />
                <semantic-value key='&quot;bath&quot;' value='&quot;Bathurst&quot;' />
                <semantic-value key='&quot;belle river&quot;' value='&quot;Lakeshore&quot;' />
                <semantic-value key='&quot;belleville&quot;' value='&quot;Belleville&quot;' />
                <semantic-value key='&quot;blenheim&quot;' value='&quot;Blandford-Blenheim&quot;' />
                <semantic-value key='&quot;bolton&quot;' value='&quot;Bolton-Ouest&quot;' />
                <semantic-value key='&quot;brampton&quot;' value='&quot;Brampton&quot;' />
                <semantic-value key='&quot;burlington&quot;' value='&quot;Burlington&quot;' />
                <semantic-value key='&quot;caledonia&quot;' value='&quot;Caledonia&quot;' />
                <semantic-value key='&quot;cambridge&quot;' value='&quot;Cambridge&quot;' />
                <semantic-value key='&quot;charing cross&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;cochrane&quot;' value='&quot;Cochrane&quot;' />
                <semantic-value key='&quot;collingwood&quot;' value='&quot;Collingwood&quot;' />
                <semantic-value key='&quot;comber&quot;' value='&quot;Lakeshore&quot;' />
                <semantic-value key='&quot;concord&quot;' value='&quot;Vaughan&quot;' />
                <semantic-value key='&quot;cornwall&quot;' value='&quot;Cornwall&quot;' />
                <semantic-value key='&quot;courtice&quot;' value='&quot;Oshawa&quot;' />
                <semantic-value key='&quot;cranbrook&quot;' value='&quot;Cranbrook&quot;' />
                <semantic-value key='&quot;dartmouth&quot;' value='&quot;Dartmouth&quot;' />
                <semantic-value key='&quot;dearborn&quot;' value='&quot;Dearborn&quot;' />
                <semantic-value key='&quot;dover centre&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;dresden&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;dryden&quot;' value='&quot;Dryden&quot;' />
                <semantic-value key='&quot;dundas&quot;' value='&quot;North Dundas&quot;' />
                <semantic-value key='&quot;dutton&quot;' value='&quot;Dutton/Dunwich&quot;' />
                <semantic-value key='&quot;edmonton&quot;' value='&quot;Edmonton&quot;' />
                <semantic-value key='&quot;essex&quot;' value='&quot;Essex&quot;' />
                <semantic-value key='&quot;etobicoke&quot;' value='&quot;Toronto&quot;' />
                <semantic-value key='&quot;georgetown&quot;' value='&quot;Georgetown&quot;' />
                <semantic-value key='&quot;geraldton&quot;' value='&quot;Greenstone&quot;' />
                <semantic-value key='&quot;golden&quot;' value='&quot;Golden&quot;' />
                <semantic-value key='&quot;grand valley&quot;' value='&quot;East Luther Grand Valley&quot;' />
                <semantic-value key='&quot;hamilton&quot;' value='&quot;Hamilton&quot;' />
                <semantic-value key='&quot;hanover&quot;' value='&quot;Hanover&quot;' />
                <semantic-value key='&quot;huntsville&quot;' value='&quot;Huntsville&quot;' />
                <semantic-value key='&quot;ilderton&quot;' value='&quot;London&quot;' />
                <semantic-value key='&quot;kanata&quot;' value='&quot;Ottawa&quot;' />
                <semantic-value key='&quot;kemptville&quot;' value='&quot;North Grenville&quot;' />
                <semantic-value key='&quot;kincardine&quot;' value='&quot;Kincardine&quot;' />
                <semantic-value key='&quot;kingston&quot;' value='&quot;Kingston&quot;' />
                <semantic-value key='&quot;kingsville&quot;' value='&quot;Kingsville&quot;' />
                <semantic-value key='&quot;komoka&quot;' value='&quot;London&quot;' />
                <semantic-value key='&quot;lakeshore&quot;' value='&quot;Lakeshore&quot;' />
                <semantic-value key='&quot;lasalle&quot;' value='&quot;Windsor&quot;' />
                <semantic-value key='&quot;lasalle.&quot;' value='&quot;Windsor&quot;' />
                <semantic-value key='&quot;leamington&quot;' value='&quot;Leamington&quot;' />
                <semantic-value key='&quot;listowell&quot;' value='&quot;North Perth&quot;' />
                <semantic-value key='&quot;london&quot;' value='&quot;London&quot;' />
                <semantic-value key='&quot;lucan&quot;' value='&quot;Lucan Biddulph&quot;' />
                <semantic-value key='&quot;maidstone&quot;' value='&quot;Lakeshore&quot;' />
                <semantic-value key='&quot;markham&quot;' value='&quot;Markham&quot;' />
                <semantic-value key='&quot;merlin&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;mirabel&quot;' value='&quot;Mirabel&quot;' />
                <semantic-value key='&quot;mitchell&quot;' value='&quot;West Perth&quot;' />
                <semantic-value key='&quot;montreal&quot;' value='&quot;Montreal&quot;' />
                <semantic-value key='&quot;morrisburg&quot;' value='&quot;South Dundas&quot;' />
                <semantic-value key='&quot;new hamburg&quot;' value='&quot;Wilmot&quot;' />
                <semantic-value key='&quot;niagara&quot;' value='&quot;Niagara-On-The-Lake&quot;' />
                <semantic-value key='&quot;north bay&quot;' value='&quot;North Bay&quot;' />
                <semantic-value key='&quot;oakville&quot;' value='&quot;Oakville&quot;' />
                <semantic-value key='&quot;oldcastle&quot;' value='&quot;Tecumseh&quot;' />
                <semantic-value key='&quot;orangeville&quot;' value='&quot;Orangeville&quot;' />
                <semantic-value key='&quot;orléans&quot;' value='&quot;Ottawa&quot;' />
                <semantic-value key='&quot;oshawa&quot;' value='&quot;Oshawa&quot;' />
                <semantic-value key='&quot;ottawa&quot;' value='&quot;Ottawa&quot;' />
                <semantic-value key='&quot;paris&quot;' value='&quot;Brant&quot;' />
                <semantic-value key='&quot;pelee island&quot;' value='&quot;Pelee&quot;' />
                <semantic-value key='&quot;pembroke&quot;' value='&quot;Pembroke&quot;' />
                <semantic-value key='&quot;peterborough&quot;' value='&quot;Peterborough&quot;' />
                <semantic-value key='&quot;petrolia&quot;' value='&quot;Petrolia&quot;' />
                <semantic-value key='&quot;point edward&quot;' value='&quot;Point Edward&quot;' />
                <semantic-value key='&quot;port hope&quot;' value='&quot;Port Hope&quot;' />
                <semantic-value key='&quot;richmond hill&quot;' value='&quot;Richmond Hill&quot;' />
                <semantic-value key='&quot;ridgetown&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;ruthven&quot;' value='&quot;Kingsville&quot;' />
                <semantic-value key='&quot;sarnia&quot;' value='&quot;Sarnia&quot;' />
                <semantic-value key='&quot;sault ste. marie&quot;' value='&quot;Sault Ste. Marie&quot;' />
                <semantic-value key='&quot;scarborough&quot;' value='&quot;Toronto&quot;' />
                <semantic-value key='&quot;shelburne&quot;' value='&quot;Shelburne&quot;' />
                <semantic-value key='&quot;southfield&quot;' value='&quot;Southfield&quot;' />
                <semantic-value key='&quot;st. marys&quot;' value='&quot;Perth South&quot;' />
                <semantic-value key='&quot;stoney creek&quot;' value='&quot;Hamilton&quot;' />
                <semantic-value key='&quot;stoney point&quot;' value='&quot;Lakeshore&quot;' />
                <semantic-value key='&quot;stratford&quot;' value='&quot;Stratford&quot;' />
                <semantic-value key='&quot;strathroy&quot;' value='&quot;Strathroy-Caradoc&quot;' />
                <semantic-value key='&quot;sudbury&quot;' value='&quot;Sudbury&quot;' />
                <semantic-value key='&quot;taylor&quot;' value='&quot;Taylor&quot;' />
                <semantic-value key='&quot;tecumseh&quot;' value='&quot;Tecumseh&quot;' />
                <semantic-value key='&quot;thamesville&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;thornhill&quot;' value='&quot;York&quot;' />
                <semantic-value key='&quot;tilbury&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;toronto&quot;' value='&quot;Toronto&quot;' />
                <semantic-value key='&quot;vancouver&quot;' value='&quot;Vancouver&quot;' />
                <semantic-value key='&quot;vaughan&quot;' value='&quot;Vaughan&quot;' />
                <semantic-value key='&quot;victoria&quot;' value='&quot;Victoria&quot;' />
                <semantic-value key='&quot;wallacbeurg&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;wallaceburg&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;warren&quot;' value='&quot;Warren&quot;' />
                <semantic-value key='&quot;waterford&quot;' value='&quot;New Waterford&quot;' />
                <semantic-value key='&quot;waterloo&quot;' value='&quot;Waterloo&quot;' />
                <semantic-value key='&quot;wheatley&quot;' value='&quot;Chatham-Kent&quot;' />
                <semantic-value key='&quot;whitby&quot;' value='&quot;Whitby&quot;' />
                <semantic-value key='&quot;winchester&quot;' value='&quot;North Dundas&quot;' />
                <semantic-value key='&quot;windsor&quot;' value='&quot;Windsor&quot;' />
                <semantic-value key='&quot;wingham&quot;' value='&quot;North Huron&quot;' />
                <semantic-value key='&quot;woodslee&quot;' value='&quot;Lakeshore&quot;' />
                <semantic-value key='&quot;woodstock&quot;' value='&quot;Woodstock&quot;' />
                <semantic-value key='&quot;wyoming&quot;' value='&quot;Plympton-Wyoming&quot;' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Latitude]'>
                <semantic-value key='&quot;alliston&quot;' value='44.151299999999999' />
                <semantic-value key='&quot;arkona&quot;' value='43.073999999999998' />
                <semantic-value key='&quot;belwoodtario&quot;' value='43.7941' />
                <semantic-value key='&quot;chapleau&quot;' value='47.842300000000002' />
                <semantic-value key='&quot;corunna&quot;' value='42.884700000000002' />
                <semantic-value key='&quot;courtright&quot;' value='42.816667000000002' />
                <semantic-value key='&quot;emeryville&quot;' value='42.296799999999998' />
                <semantic-value key='&quot;fergus&quot;' value='43.706000000000003' />
                <semantic-value key='&quot;glencoe&quot;' value='42.747300000000003' />
                <semantic-value key='&quot;grand bend&quot;' value='43.315600000000003' />
                <semantic-value key='&quot;gta&quot;' value='44.038400000000003' />
                <semantic-value key='&quot;hagersville&quot;' value='42.959899999999998' />
                <semantic-value key='&quot;hiuntsville&quot;' value='45.326900000000002' />
                <semantic-value key='&quot;minett&quot;' value='45.163200000000003' />
                <semantic-value key='&quot;mooretown&quot;' value='42.841799999999999' />
                <semantic-value key='&quot;morriston&quot;' value='43.448300000000003' />
                <semantic-value key='&quot;mount brydges&quot;' value='42.909700000000001' />
                <semantic-value key='&quot;newbury&quot;' value='42.6845' />
                <semantic-value key='&quot;newmarket&quot;' value='44.059199999999997' />
                <semantic-value key='&quot;pakenham&quot;' value='45.332999999999998' />
                <semantic-value key='&quot;port perry&quot;' value='44.104999999999997' />
                <semantic-value key='&quot;st. thomas&quot;' value='42.777700000000003' />
                <semantic-value key='&quot;staples&quot;' value='42.171100000000003' />
                <semantic-value key='&quot;trois-rivières&quot;' value='46.343000000000004' />
                <semantic-value key='&quot;watford&quot;' value='42.955500000000001' />
                <semantic-value key='&quot;west lorne&quot;' value='42.6038' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Longitude]'>
                <semantic-value key='&quot;alliston&quot;' value='-79.874399999999994' />
                <semantic-value key='&quot;arkona&quot;' value='-81.830600000000004' />
                <semantic-value key='&quot;belwoodtario&quot;' value='-80.322500000000005' />
                <semantic-value key='&quot;chapleau&quot;' value='-83.402600000000007' />
                <semantic-value key='&quot;corunna&quot;' value='-82.450900000000004' />
                <semantic-value key='&quot;courtright&quot;' value='-82.466667000000001' />
                <semantic-value key='&quot;emeryville&quot;' value='-82.760300000000001' />
                <semantic-value key='&quot;fergus&quot;' value='-80.377799999999993' />
                <semantic-value key='&quot;glencoe&quot;' value='-81.709500000000006' />
                <semantic-value key='&quot;grand bend&quot;' value='-81.764499999999998' />
                <semantic-value key='&quot;gta&quot;' value='-79.200000000000003' />
                <semantic-value key='&quot;hagersville&quot;' value='-80.052300000000002' />
                <semantic-value key='&quot;hiuntsville&quot;' value='-79.216800000000006' />
                <semantic-value key='&quot;minett&quot;' value='-79.653300000000002' />
                <semantic-value key='&quot;mooretown&quot;' value='-82.461699999999993' />
                <semantic-value key='&quot;morriston&quot;' value='-80.117199999999997' />
                <semantic-value key='&quot;mount brydges&quot;' value='-81.495900000000006' />
                <semantic-value key='&quot;newbury&quot;' value='-81.797799999999995' />
                <semantic-value key='&quot;newmarket&quot;' value='-79.461299999999994' />
                <semantic-value key='&quot;pakenham&quot;' value='-76.290400000000005' />
                <semantic-value key='&quot;port perry&quot;' value='-78.944100000000006' />
                <semantic-value key='&quot;st. thomas&quot;' value='-81.182699999999997' />
                <semantic-value key='&quot;staples&quot;' value='-82.593500000000006' />
                <semantic-value key='&quot;trois-rivières&quot;' value='-72.542100000000005' />
                <semantic-value key='&quot;watford&quot;' value='-81.879900000000006' />
                <semantic-value key='&quot;west lorne&quot;' value='-81.606700000000004' />
              </semantic-values>
            </column>
            <column caption='Program Name' datatype='string' name='[ProgramName]' role='dimension' type='nominal' />
            <column datatype='real' name='[StudentsPlacedFall22]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_1352487276698451968]' derivation='None' name='[none:Calculation_1352487276698451968:nk]' pivot='key' type='nominal' />
            <column-instance column='[StudentsPlacedFall22]' derivation='Sum' name='[sum:StudentsPlacedFall22:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.16mspkp1407wzn1e4ix890eenso9].[none:Calculation_1352487276698451968:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([StudentsPlacedFall22])' function='order' user:ui-marker='order'>
                <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='level-members' level='[none:Calculation_1352487276698451968:nk]' />
                  <groupfilter function='member' level='[none:Calculation_1352487276698451968:nk]' member='%null%' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <manual-sort column='[federated.16mspkp1407wzn1e4ix890eenso9].[none:Calculation_1352487276698451968:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;windsor&quot;</bucket>
              <bucket>&quot;chatham-kent&quot;</bucket>
              <bucket>&quot;tecumseh&quot;</bucket>
              <bucket>&quot;lasalle&quot;</bucket>
              <bucket>&quot;leamington&quot;</bucket>
              <bucket>&quot;mississauga&quot;</bucket>
              <bucket>&quot;kingsville&quot;</bucket>
              <bucket>&quot;toronto&quot;</bucket>
              <bucket>&quot;amherstburg&quot;</bucket>
              <bucket>&quot;Others&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.16mspkp1407wzn1e4ix890eenso9].[none:Calculation_1352487276698451968:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' value='N' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-sequential'>
                <color>#f1f1f1</color>
                <color>#e9d2d2</color>
                <color>#e2b5b5</color>
                <color>#db9999</color>
                <color>#d47f7f</color>
                <color>#cd6666</color>
                <color>#c64f4f</color>
                <color>#bf3939</color>
                <color>#b82424</color>
                <color>#b11111</color>
                <color>#aa0000</color>
              </color-palette>
            </encoding>
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='b01002_001e' value='false' />
            <format attr='enabled' id='b01002_002e' value='false' />
            <format attr='enabled' id='b01002_003e' value='false' />
            <format attr='enabled' id='dp02_0001e' value='false' />
            <format attr='enabled' id='dp02_0015e' value='false' />
            <format attr='enabled' id='dp03_0027e_plus_dp03_0029e' value='false' />
            <format attr='enabled' id='dp03_0028e' value='false' />
            <format attr='enabled' id='dp03_0030e_plus_dp03_0031e' value='false' />
            <format attr='enabled' id='dp03_0062e' value='false' />
            <format attr='enabled' id='dp03_0088e' value='false' />
            <format attr='enabled' id='dp04_0001e' value='false' />
            <format attr='enabled' id='dp04_0046e' value='false' />
            <format attr='enabled' id='dp04_0047e' value='false' />
            <format attr='enabled' id='dp04_0089e' value='false' />
            <format attr='enabled' id='dp05_0001e' value='false' />
            <format attr='enabled' id='dp05_0002e_div_dp05_0003e' value='false' />
            <format attr='enabled' id='dp05_0032e' value='false' />
            <format attr='enabled' id='dp05_0033e' value='false' />
            <format attr='enabled' id='dp05_0034e' value='false' />
            <format attr='enabled' id='dp05_0039e' value='false' />
            <format attr='enabled' id='dp05_0047e' value='false' />
            <format attr='enabled' id='dp05_0053e' value='false' />
            <format attr='enabled' id='dp05_0066e' value='false' />
            <format attr='enabled' id='dp05_0077e' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0' />
            <format attr='map-style' value='streets' />
            <format attr='wrap' value='false' />
          </style-rule>
          <style-rule element='map-data-layer'>
            <format attr='palette' value='tableau-map-blue-green-light' />
            <format attr='geo-area-type' value='State' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.16mspkp1407wzn1e4ix890eenso9].[none:Calculation_1352487276698451968:nk]</rows>
        <cols>[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]</cols>
      </table>
      <simple-id uuid='{C766E8A4-869B-45D4-8107-3D17D7F37020}' />
    </worksheet>
    <worksheet name='TopProgram'>
      <table>
        <view>
          <datasources>
            <datasource caption='placed' name='federated.16mspkp1407wzn1e4ix890eenso9' />
          </datasources>
          <datasource-dependencies datasource='federated.16mspkp1407wzn1e4ix890eenso9'>
            <column caption='topPrograms' datatype='string' name='[Calculation_551128017416663046]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF { FIXED [ProgramName]: SUM([StudentsPlacedFall22]) } &lt; 49 THEN &quot;Others&quot; ELSE [ProgramName] END' />
            </column>
            <column caption='Program Name' datatype='string' name='[ProgramName]' role='dimension' type='nominal' />
            <column datatype='real' name='[StudentsPlacedFall22]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_551128017416663046]' derivation='None' name='[none:Calculation_551128017416663046:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProgramName]' derivation='None' name='[none:ProgramName:nk]' pivot='key' type='nominal' />
            <column-instance column='[StudentsPlacedFall22]' derivation='Sum' name='[sum:StudentsPlacedFall22:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.16mspkp1407wzn1e4ix890eenso9].[Exclusions (Program Name,topPrograms)]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[none:ProgramName:nk]' />
                <groupfilter function='level-members' level='[none:Calculation_551128017416663046:nk]' />
              </groupfilter>
              <groupfilter function='reorder-dimensionality'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Calculation_551128017416663046:nk]' member='%null%' />
                  <groupfilter function='member' level='[none:ProgramName:nk]' member='%null%' />
                </groupfilter>
                <order>
                  <hierarchy name='[none:ProgramName:nk]' />
                  <hierarchy name='[none:Calculation_551128017416663046:nk]' />
                </order>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.16mspkp1407wzn1e4ix890eenso9].[none:Calculation_551128017416663046:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([StudentsPlacedFall22])' function='order' user:ui-marker='order'>
                <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='level-members' level='[none:Calculation_551128017416663046:nk]' />
                  <groupfilter function='member' level='[none:Calculation_551128017416663046:nk]' member='%null%' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <manual-sort column='[federated.16mspkp1407wzn1e4ix890eenso9].[none:Calculation_551128017416663046:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Construciton Engineering Technician / Construciton Project Management&quot;</bucket>
              <bucket>&quot;Business Administration - Human Resources&quot;</bucket>
              <bucket>&quot;Dental Assisting Level I and II&quot;</bucket>
              <bucket>&quot;Pharmacy Technician&quot;</bucket>
              <bucket>&quot;Child and Youth Care&quot;</bucket>
              <bucket>&quot;Fitness &amp; Health Promotion&quot;</bucket>
              <bucket>&quot;Diagnostic Medical Sonography&quot;</bucket>
              <bucket>&quot;Biomedical Engineering Technology - Equipment and Devices&quot;</bucket>
              <bucket>&quot;Early Childhood Education&quot;</bucket>
              <bucket>&quot;Others&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.16mspkp1407wzn1e4ix890eenso9].[Exclusions (Program Name,topPrograms)]</column>
            <column>[federated.16mspkp1407wzn1e4ix890eenso9].[none:Calculation_551128017416663046:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' value='N' />
          </style-rule>
          <style-rule element='header'>
            <format attr='background-color' field='[federated.16mspkp1407wzn1e4ix890eenso9].[none:Calculation_551128017416663046:nk]' value='#ffffff' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-sequential'>
                <color>#f1f1f1</color>
                <color>#e8d3d8</color>
                <color>#dfb7c1</color>
                <color>#d69cac</color>
                <color>#cd8497</color>
                <color>#c56c83</color>
                <color>#bc5771</color>
                <color>#b34260</color>
                <color>#aa3050</color>
                <color>#a11f41</color>
                <color>#991034</color>
              </color-palette>
            </encoding>
          </style-rule>
          <style-rule element='table'>
            <format attr='show-null-value-warning' value='false' />
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.16mspkp1407wzn1e4ix890eenso9].[none:Calculation_551128017416663046:nk]' />
              <text column='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.16mspkp1407wzn1e4ix890eenso9].[none:Calculation_551128017416663046:nk]</rows>
        <cols>[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]</cols>
      </table>
      <simple-id uuid='{C6A86240-0A49-4699-98BE-95724E272573}' />
    </worksheet>
    <worksheet name='WilPlaced'>
      <table>
        <view>
          <datasources>
            <datasource caption='placed' name='federated.16mspkp1407wzn1e4ix890eenso9' />
          </datasources>
          <datasource-dependencies datasource='federated.16mspkp1407wzn1e4ix890eenso9'>
            <column datatype='real' name='[StudentsPlacedFall22]' role='measure' type='quantitative' />
            <column caption='Wil Type' datatype='string' name='[WilType]' role='dimension' type='nominal' />
            <column-instance column='[WilType]' derivation='None' name='[none:WilType:nk]' pivot='key' type='nominal' />
            <column-instance column='[StudentsPlacedFall22]' derivation='Sum' name='[sum:StudentsPlacedFall22:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.16mspkp1407wzn1e4ix890eenso9].[none:WilType:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:WilType:nk]' />
              <groupfilter function='member' level='[none:WilType:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' included-values='non-null' />
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.16mspkp1407wzn1e4ix890eenso9].[none:WilType:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.16mspkp1407wzn1e4ix890eenso9].[none:WilType:nk]</column>
            <column>[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' value='N' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.16mspkp1407wzn1e4ix890eenso9].[none:WilType:nk]</rows>
        <cols>[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]</cols>
      </table>
      <simple-id uuid='{9053CEDF-3771-4A2A-9EEE-7909BA99686F}' />
    </worksheet>
    <worksheet name='WilProgPlaced'>
      <table>
        <view>
          <datasources>
            <datasource caption='placed' name='federated.16mspkp1407wzn1e4ix890eenso9' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.16mspkp1407wzn1e4ix890eenso9'>
            <column caption='Program Name' datatype='string' name='[ProgramName]' role='dimension' type='nominal' />
            <column datatype='real' name='[StudentsPlacedFall22]' role='measure' type='quantitative' />
            <column caption='Wil Type' datatype='string' name='[WilType]' role='dimension' type='nominal' />
            <column-instance column='[ProgramName]' derivation='None' name='[none:ProgramName:nk]' pivot='key' type='nominal' />
            <column-instance column='[WilType]' derivation='None' name='[none:WilType:nk]' pivot='key' type='nominal' />
            <column-instance column='[StudentsPlacedFall22]' derivation='Sum' name='[sum:StudentsPlacedFall22:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.16mspkp1407wzn1e4ix890eenso9].[none:WilType:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:WilType:nk]' />
              <groupfilter function='member' level='[none:WilType:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.16mspkp1407wzn1e4ix890eenso9].[none:WilType:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.16mspkp1407wzn1e4ix890eenso9].[none:WilType:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' value='N' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='b01002_001e' value='false' />
            <format attr='enabled' id='b01002_002e' value='false' />
            <format attr='enabled' id='b01002_003e' value='false' />
            <format attr='enabled' id='dp02_0001e' value='false' />
            <format attr='enabled' id='dp02_0015e' value='false' />
            <format attr='enabled' id='dp03_0027e_plus_dp03_0029e' value='false' />
            <format attr='enabled' id='dp03_0028e' value='false' />
            <format attr='enabled' id='dp03_0030e_plus_dp03_0031e' value='false' />
            <format attr='enabled' id='dp03_0062e' value='false' />
            <format attr='enabled' id='dp03_0088e' value='false' />
            <format attr='enabled' id='dp04_0001e' value='false' />
            <format attr='enabled' id='dp04_0046e' value='false' />
            <format attr='enabled' id='dp04_0047e' value='false' />
            <format attr='enabled' id='dp04_0089e' value='false' />
            <format attr='enabled' id='dp05_0001e' value='false' />
            <format attr='enabled' id='dp05_0002e_div_dp05_0003e' value='false' />
            <format attr='enabled' id='dp05_0032e' value='false' />
            <format attr='enabled' id='dp05_0033e' value='false' />
            <format attr='enabled' id='dp05_0034e' value='false' />
            <format attr='enabled' id='dp05_0039e' value='false' />
            <format attr='enabled' id='dp05_0047e' value='false' />
            <format attr='enabled' id='dp05_0053e' value='false' />
            <format attr='enabled' id='dp05_0066e' value='false' />
            <format attr='enabled' id='dp05_0077e' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0' />
            <format attr='map-style' value='streets' />
            <format attr='wrap' value='false' />
          </style-rule>
          <style-rule element='map-data-layer'>
            <format attr='palette' value='tableau-map-blue-green-light' />
            <format attr='geo-area-type' value='State' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.16mspkp1407wzn1e4ix890eenso9].[none:ProgramName:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.16mspkp1407wzn1e4ix890eenso9].[none:WilType:nk]</rows>
        <cols>[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]</cols>
      </table>
      <simple-id uuid='{1C4BF6AF-DC4E-462A-9BD9-706CAB03C3E7}' />
    </worksheet>
  </worksheets>
  <windows source-height='30'>
    <window class='worksheet' name='TopProgram'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.16mspkp1407wzn1e4ix890eenso9].[none:Calculation_551128017416663046:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[Program Name Set]</field>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:Calculation_551128017409187840:nk]</field>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:Calculation_551128017416663046:nk]</field>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:PAC/PLACE/CAREER:nk]</field>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:ProgramName:nk]</field>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:WilType:nk]</field>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{0C239FE1-B37F-4FD8-83BE-16856FEB6AFD}' />
    </window>
    <window class='worksheet' name='ContactPlace'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:City:nk]</field>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:ContactName:nk]</field>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:PAC/PLACE/CAREER:nk]</field>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:ProgramName:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{944EA8EE-E302-4046-AD66-7A2F23591F16}' />
    </window>
    <window class='worksheet' name='WilPlaced'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:ProgramName:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E24DF2C2-E173-4B61-912F-1B4AE438564D}' />
    </window>
    <window class='worksheet' name='PlacedbyCity'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:Calculation_1352487276698451968:nk]</field>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:City:nk]</field>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:ContactName:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C6C4A639-42C1-4508-9D88-65D79E0AC82D}' />
    </window>
    <window class='worksheet' name='PPCDistribution'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.16mspkp1407wzn1e4ix890eenso9].[none:PAC/PLACE/CAREER:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:ContactName:nk]</field>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:PAC/PLACE/CAREER:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{01ED86AA-75DD-4777-BB6F-E52ACD5CBDF3}' />
    </window>
    <window class='worksheet' name='CCPlaced'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.16mspkp1407wzn1e4ix890eenso9].[sum:StudentsPlacedFall22:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:PAC/PLACE/CAREER:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{502BFF0B-C874-45D4-B8E5-BB88D6BD8FE1}' />
    </window>
    <window class='worksheet' name='ContProgPlaced'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.16mspkp1407wzn1e4ix890eenso9].[none:ProgramName:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:City:nk]</field>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:ContactName:nk]</field>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:PAC/PLACE/CAREER:nk]</field>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:ProgramName:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{B928F37D-DCE0-4EB3-B53F-FDE510E2792C}' />
    </window>
    <window class='worksheet' name='CityContactPlaced'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.16mspkp1407wzn1e4ix890eenso9].[none:City:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:City:nk]</field>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:ContactName:nk]</field>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:ProgramName:nk]</field>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:WilType:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{13AD3451-1954-4F61-B892-738193E088EF}' />
    </window>
    <window class='worksheet' name='WilProgPlaced'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.16mspkp1407wzn1e4ix890eenso9].[none:ProgramName:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:City:nk]</field>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:ProgramName:nk]</field>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:WilType:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{72D4C760-04AB-4AB4-8F42-1894014E2104}' />
    </window>
    <window class='worksheet' maximized='true' name='CityCoursePlaced'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.16mspkp1407wzn1e4ix890eenso9].[none:CourseCode:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.16mspkp1407wzn1e4ix890eenso9].[none:CourseCode:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{52DA4303-05B4-42E1-9F18-28D250ABEA01}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='288' name='CCPlaced' width='288'>
      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
    </thumbnail>
    <thumbnail height='288' name='CityContactPlaced' width='288'>
      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
    </thumbnail>
    <thumbnail height='288' name='CityCoursePlaced' width='288'>
      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
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='288' name='ContProgPlaced' width='288'>
      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
    </thumbnail>
    <thumbnail height='288' name='ContactPlace' width='288'>
      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
      7DMoX7OC/w8ZT9vqZsZ7oAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='288' name='PPCDistribution' width='288'>
      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
    </thumbnail>
    <thumbnail height='288' name='PlacedbyCity' width='288'>
      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
      AElFTkSuQmCC
    </thumbnail>
    <thumbnail height='288' name='TopProgram' width='288'>
      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
    </thumbnail>
    <thumbnail height='288' name='WilPlaced' width='288'>
      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
      AElFTkSuQmCC
    </thumbnail>
    <thumbnail height='288' name='WilProgPlaced' width='288'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
